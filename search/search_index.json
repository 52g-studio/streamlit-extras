{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A Python library with useful Streamlit extras","text":"<p>Welcome to the \ud83e\udea2 streamlit-extras documentation. If you want to give a special touch to your Streamlit apps, you're at the right place!</p> <p>This library includes &gt; 20 functional or visual additions to Streamlit that will make your life easier or your apps nicer. We call them extras and anyone's welcome to add their owns. See our contribution guide.</p> <p>Go ahead and Browse Extras in the left handside menu, and if you like them, remember, you're just a pip install away from using them:</p> <pre><code>pip install streamlit-extras\n</code></pre> <p>Maintained by @arnaudmiribel &amp; @blackary.</p>"},{"location":"components/","title":"Streamlit Components","text":"<p>\ud83e\udea2 streamlit-extras is in fact... a Streamlit Component!</p>"},{"location":"components/#whats-a-streamlit-component","title":"What's a Streamlit component?","text":"<p>Components are third-party modules that extend what\u2019s possible with Streamlit.</p>"},{"location":"components/#show-me-more","title":"Show me more!","text":"<p>Visit the components gallery to discover even more components, and learn how to build your own using this great blog post by Zachary.</p>"},{"location":"contributing/","title":"\ud83d\ude4b Contributing","text":"<p>Head over to our public repository and:</p> <ul> <li>Create an empty directory for your extra in the <code>src/streamlit_extras</code> directory</li> <li> <p>Add a <code>__init__.py</code> file to give in some metadata so we can automatically showcase your extra in the hub!</p> </li> <li> <p>If your function is new, and doesn't yet exist on PyPi, here's an example of how to add it:</p> <p><pre><code># extras/&lt;extra_name&gt;/__init__.py\nfrom .. import extra\n@extra  # this will register your function's extra\ndef my_main_function():\n...\ndef example():\n...\n__title__ = \"Great title!\"  # title of your extra!\n__desc__ = \"Great description\"  # description of your extra!\n__icon__ = \"\ud83d\udd2d\"  # give your extra an icon!\n__examples__ = [example]  # create some examples to show how cool your extra is!\n__author__ = \"Eva Jensen\"\n__experimental_playground__ = False # Optional\n</code></pre> To test it out, run <code>pip install -e .</code> in the <code>streamlit-extras</code> directory, and then run the <code>gallery/streamlit_app.py</code> app.</p> </li> <li> <p>If your extra already exists on github and pypi:</p> <pre><code># extras/&lt;extra_name&gt;/__init__.py\nfrom my_package import my_main_function\nfrom .. import extra\nmy_main_function = extra(my_main_function)\ndef example():\n...\n__title__ = \"Great title!\"  # title of your extra!\n__desc__ = \"Great description\"  # description of your extra!\n__icon__ = \"\ud83d\udd2d\"  # give your extra an icon!\n__examples__ = [example]  # create some examples to show how cool your extra is!\n__author__ = \"Eva Jensen\"\n__pypi_name__ = \"my-cool-package\"\n__package_name__ = \"my_package\"\n__github_repo__ = \"evajensen/my-repo\" # Optional\n__streamlit_cloud_url__ = \"http://my-super-app.streamlitapp.com\" # Optional\n__experimental_playground__ = False # Optional\n</code></pre> <p>Then add <code>my_package</code> to the list of <code>dependencies</code> in <code>pyproject.toml</code>   - You can also add a \"featured-extra\" badge to your original README.md if you like!  </p> </li> <li> <p>If you'd like to test that your package has all the required fields, you can run <code>poetry run pytest</code> from the repository</p> </li> <li>You can set up linting to standardize your code by running <code>pre-commit install</code>, which will then check the formatting of the files you added</li> <li>Submit a PR!</li> </ul> <p>If you are having troubles, create an issue on the repo or DM me on Twitter!</p>"},{"location":"extras/add_vertical_space/","title":"\ud83d\udc7d\u00a0\u00a0Add Vertical Space","text":"<p>Submitted by Tyler Richards</p>"},{"location":"extras/add_vertical_space/#summary","title":"Summary","text":"<p>Add n lines of vertical space to your Streamlit app in one command</p>"},{"location":"extras/add_vertical_space/#functions","title":"Functions","text":""},{"location":"extras/add_vertical_space/#add_vertical_space","title":"<code>add_vertical_space</code>","text":"<p>Add vertical space to your Streamlit app.</p> <p>Parameters:</p> Name Type Description Default <code>num_lines</code> <code>int</code> <p>Height of the vertical space (given in number of lines). Defaults to 1.</p> <code>1</code> Source code in <code>src/streamlit_extras/add_vertical_space/__init__.py</code> <pre><code>@extra\ndef add_vertical_space(num_lines: int = 1) -&gt; None:\n\"\"\"\n    Add vertical space to your Streamlit app.\n    Args:\n        num_lines (int, optional): Height of the vertical space (given in number of lines). Defaults to 1.\n    \"\"\"\nfor _ in range(num_lines):\nst.write(\"\")  # This is just a way to do a line break!\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.add_vertical_space import add_vertical_space # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/altex/","title":"\ud83d\udc78\u00a0\u00a0Altex","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/altex/#summary","title":"Summary","text":"<p>A simple wrapper on top of Altair to make Streamlit charts in an express API. If you're lazy and/or familiar with Altair, this is  probably a good fit! Inspired by plost and plotly-express.</p>"},{"location":"extras/altex/#functions","title":"Functions","text":""},{"location":"extras/altex/#_chart","title":"<code>_chart</code>","text":"<p>Get an Altair chart object</p> <p>Parameters:</p> Name Type Description Default <code>mark_function</code> <code>str</code> <p>Altair mark function, example line/bar/point</p> required <code>data</code> <code>DataFrame</code> <p>Dataframe to use for the chart</p> required <code>x</code> <code>Union[X, str]</code> <p>Column for the x axis</p> required <code>y</code> <code>Union[Y, str]</code> <p>Column for the y axis</p> required <code>color</code> <code>Optional[Union[Color, str]]</code> <p>Color a specific group of your data. Defaults to None.</p> <code>None</code> <code>opacity</code> <code>Optional[Union[value, float]]</code> <p>Change opacity of marks. Defaults to None.</p> <code>None</code> <code>column</code> <code>Optional[Union[Column, str]]</code> <p>Groupby a specific column. Defaults to None.</p> <code>None</code> <code>rolling</code> <code>Optional[int]</code> <p>Rolling average window size. Defaults to None.</p> <code>None</code> <code>title</code> <code>Optional[str]</code> <p>Title of the chart. Defaults to None.</p> <code>None</code> <code>width</code> <code>Optional[int]</code> <p>Width of the chart. Defaults to None.</p> <code>None</code> <code>height</code> <code>Optional[int]</code> <p>Height of the chart. Defaults to None.</p> <code>None</code> <code>spark</code> <code>bool</code> <p>Whether or not to make spark chart, i.e. a chart without axes nor ticks nor legend. Defaults to False.</p> <code>False</code> <code>autoscale_y</code> <code>bool</code> <p>Whether or not to autoscale the y axis. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Chart</code> <p>alt.Chart: Altair chart</p> Source code in <code>src/streamlit_extras/altex/__init__.py</code> <pre><code>@extra\ndef _chart(\nmark_function: str,\ndata: pd.DataFrame,\nx: Union[alt.X, str],\ny: Union[alt.Y, str],\ncolor: Optional[Union[alt.Color, str]] = None,\nopacity: Optional[Union[alt.value, float]] = None,\ncolumn: Optional[Union[alt.Column, str]] = None,\nrolling: Optional[int] = None,\ntitle: Optional[str] = None,\nwidth: Optional[int] = None,\nheight: Optional[int] = None,\nspark: bool = False,\nautoscale_y: bool = False,\n) -&gt; alt.Chart:\n\"\"\"Get an Altair chart object\n    Args:\n        mark_function (str): Altair mark function, example line/bar/point\n        data (pd.DataFrame): Dataframe to use for the chart\n        x (Union[alt.X, str]): Column for the x axis\n        y (Union[alt.Y, str]): Column for the y axis\n        color (Optional[Union[alt.Color, str]], optional): Color a specific group of your data. Defaults to None.\n        opacity (Optional[Union[alt.value, float]], optional): Change opacity of marks. Defaults to None.\n        column (Optional[Union[alt.Column, str]], optional): Groupby a specific column. Defaults to None.\n        rolling (Optional[int], optional): Rolling average window size. Defaults to None.\n        title (Optional[str], optional): Title of the chart. Defaults to None.\n        width (Optional[int], optional): Width of the chart. Defaults to None.\n        height (Optional[int], optional): Height of the chart. Defaults to None.\n        spark (bool, optional): Whether or not to make spark chart, i.e. a chart without axes nor ticks nor legend. Defaults to False.\n        autoscale_y (bool, optional): Whether or not to autoscale the y axis. Defaults to False.\n    Returns:\n        alt.Chart: Altair chart\n    \"\"\"\ntry:\nalt.themes.enable(\"streamlit\")\nexcept entrypoints.NoSuchEntryPoint:\nst.altair_chart = partial(st.altair_chart, theme=\"streamlit\")\nx_ = _get_shorthand(x)\ny_ = _get_shorthand(y)\ncolor_ = _get_shorthand(color)\ntooltip_config = _drop_nones([x_, y_, color_])\nchart_config = _drop_nones(\n{\n\"data\": data,\n\"title\": title,\n\"mark\": mark_function,\n\"width\": width,\n\"height\": height,\n}\n)\nchart = alt.Chart(**chart_config)\nif rolling is not None:\nrolling_column = f\"{y_} ({rolling}-average)\"\ny = f\"{rolling_column}:Q\"\ntransform_config = {\nrolling_column: f\"mean({y_})\",\n\"frame\": [-rolling, 0],\n\"groupby\": [str(color)],\n}\nchart = chart.transform_window(**transform_config)\nif spark:\nchart = chart.configure_view(strokeWidth=0).configure_axis(\ngrid=False, domain=False\n)\nx_axis = _update_axis_config(x, alt.X, {\"axis\": None})\ny_axis = _update_axis_config(y, alt.Y, {\"axis\": None})\nelse:\nx_axis = x\ny_axis = y\nif autoscale_y:\ny_axis = _update_axis_config(y_axis, alt.Y, {\"scale\": alt.Scale(zero=False)})\nencode_config = _drop_nones(\n{\n\"x\": x_axis,\n\"y\": y_axis,\n\"color\": color,\n\"tooltip\": tooltip_config,\n\"opacity\": alt.value(opacity) if isinstance(opacity, float) else opacity,\n\"column\": column,\n}\n)\nchart = chart.encode(**encode_config)\nreturn chart\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.altex import _chart # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/altex/#examples","title":"Examples","text":""},{"location":"extras/altex/#example_line","title":"<code>example_line</code>","text":"<pre><code>@cache_data\ndef example_line():\nstocks = get_stocks_data()\nline_chart(\ndata=stocks.query(\"symbol == 'GOOG'\"),\nx=\"date\",\ny=\"price\",\ntitle=\"A beautiful simple line chart\",\n)\n</code></pre>"},{"location":"extras/altex/#example_multi_line","title":"<code>example_multi_line</code>","text":"<pre><code>@cache_data\ndef example_multi_line():\nstocks = get_stocks_data()\nline_chart(\ndata=stocks,\nx=\"date\",\ny=\"price\",\ncolor=\"symbol\",\ntitle=\"A beautiful multi line chart\",\n)\n</code></pre>"},{"location":"extras/altex/#example_bar","title":"<code>example_bar</code>","text":"<pre><code>@cache_data\ndef example_bar():\nstocks = get_stocks_data()\nbar_chart(\ndata=stocks.query(\"symbol == 'GOOG'\"),\nx=\"date\",\ny=\"price\",\ntitle=\"A beautiful bar chart\",\n)\n</code></pre>"},{"location":"extras/altex/#example_hist","title":"<code>example_hist</code>","text":"<pre><code>@cache_data\ndef example_hist():\nstocks = get_stocks_data()\nhist_chart(\ndata=stocks.assign(price=stocks.price.round(0)),\nx=\"price\",\ntitle=\"A beautiful histogram\",\n)\n</code></pre>"},{"location":"extras/altex/#example_scatter_opacity","title":"<code>example_scatter_opacity</code>","text":"<pre><code>@cache_data\ndef example_scatter_opacity():\nweather = get_weather_data()\nscatter_chart(\ndata=weather,\nx=alt.X(\"wind:Q\", title=\"Custom X title\"),\ny=alt.Y(\"temp_min:Q\", title=\"Custom Y title\"),\ntitle=\"A beautiful scatter chart with custom opacity\",\nopacity=0.2,\n)\n</code></pre>"},{"location":"extras/altex/#example_bar_horizontal","title":"<code>example_bar_horizontal</code>","text":"<pre><code>@cache_data\ndef example_bar_horizontal():\nweather = get_weather_data()\nbar_chart(\ndata=weather.head(15),\nx=\"temp_max:Q\",\ny=alt.Y(\"date:O\", title=\"Temperature\"),\ntitle=\"A beautiful horizontal bar chart\",\n)\n</code></pre>"},{"location":"extras/altex/#example_bar_log","title":"<code>example_bar_log</code>","text":"<pre><code>@cache_data\ndef example_bar_log():\nweather = get_weather_data()\nbar_chart(\ndata=weather,\nx=alt.X(\"temp_max:Q\", title=\"Temperature\"),\ny=alt.Y(\n\"count()\",\ntitle=\"Count of records\",\nscale=alt.Scale(type=\"symlog\"),\n),\ntitle=\"A beautiful histogram... with log scale\",\n)\n</code></pre>"},{"location":"extras/altex/#example_bar_sorted","title":"<code>example_bar_sorted</code>","text":"<pre><code>@cache_data\ndef example_bar_sorted():\nweather = get_weather_data()\nbar_chart(\ndata=weather.sort_values(by=\"temp_max\", ascending=False).head(25),\nx=alt.X(\"date\", sort=\"-y\"),\ny=alt.Y(\"temp_max:Q\"),\ntitle=\"A beautiful sorted-by-value bar chart\",\n)\n</code></pre>"},{"location":"extras/altex/#example_scatter","title":"<code>example_scatter</code>","text":"<pre><code>@cache_data\ndef example_scatter():\nweather = get_weather_data()\nscatter_chart(\ndata=weather,\nx=alt.X(\"wind:Q\", title=\"Custom X title\"),\ny=alt.Y(\"temp_min:Q\", title=\"Custom Y title\"),\ntitle=\"A beautiful scatter chart\",\n)\n</code></pre>"},{"location":"extras/altex/#example_hist_time","title":"<code>example_hist_time</code>","text":"<pre><code>@cache_data\ndef example_hist_time():\nweather = get_weather_data()\nhist_chart(\ndata=weather,\nx=\"week(date):T\",\ny=\"day(date):T\",\ncolor=alt.Color(\n\"median(temp_max):Q\",\nlegend=None,\n),\ntitle=\"A beautiful time hist chart\",\n)\n</code></pre>"},{"location":"extras/altex/#example_sparkline","title":"<code>example_sparkline</code>","text":"<pre><code>@cache_data\ndef example_sparkline():\nstocks = get_stocks_data()\nsparkline_chart(\ndata=stocks.query(\"symbol == 'GOOG'\"),\nx=\"date\",\ny=\"price\",\ntitle=\"A beautiful sparkline chart\",\nrolling=7,\nheight=150,\n)\n</code></pre>"},{"location":"extras/altex/#example_minisparklines","title":"<code>example_minisparklines</code>","text":"<pre><code>@cache_data\ndef example_minisparklines():\nstocks = get_stocks_data()\nleft, middle, right = st.columns(3)\nwith left:\ndata = stocks.query(\"symbol == 'GOOG'\")\nst.metric(\"GOOG\", int(data[\"price\"].mean()))\nsparkline_chart(\ndata=data,\nx=\"date\",\ny=\"price:Q\",\nheight=80,\nautoscale_y=True,\n)\nwith middle:\ndata = stocks.query(\"symbol == 'MSFT'\")\nst.metric(\"MSFT\", int(data[\"price\"].mean()))\nsparkline_chart(\ndata=data,\nx=\"date\",\ny=\"price:Q\",\nheight=80,\nautoscale_y=True,\n)\nwith right:\ndata = stocks.query(\"symbol == 'AAPL'\")\nst.metric(\"AAPL\", int(data[\"price\"].mean()))\nsparkline_chart(\ndata=data,\nx=\"date\",\ny=\"price:Q\",\nheight=80,\nautoscale_y=True,\n)\n</code></pre>"},{"location":"extras/altex/#example_sparkbar","title":"<code>example_sparkbar</code>","text":"<pre><code>@st.experimental_memo\ndef example_sparkbar():\nstocks = get_stocks_data()\nsparkbar_chart(\ndata=stocks.query(\"symbol == 'GOOG'\"),\nx=\"date\",\ny=\"price\",\ntitle=\"A beautiful sparkbar chart\",\nheight=150,\n)\n</code></pre>"},{"location":"extras/altex/#example_sparkarea","title":"<code>example_sparkarea</code>","text":"<pre><code>@cache_data\ndef example_sparkarea():\nrandom_data = get_random_data()\ndf = pd.melt(\nrandom_data,\nid_vars=\"index\",\nvalue_vars=list(\"abcdefg\"),\n)\nsparkarea_chart(\ndata=df,\nx=\"index\",\ny=\"value\",\ncolor=alt.Color(\"variable\", legend=None),\ntitle=\"A beautiful (also probably useless) sparkarea chart\",\nopacity=alt.value(0.6),\nheight=200,\n)\n</code></pre>"},{"location":"extras/altex/#example_bar_stacked","title":"<code>example_bar_stacked</code>","text":"<pre><code>@cache_data\ndef example_bar_stacked():\nbarley = get_barley_data()\nbar_chart(\ndata=barley,\nx=alt.X(\"variety\", title=\"Variety\"),\ny=\"sum(yield)\",\ncolor=\"site\",\ntitle=\"A beautiful stacked bar chart\",\n)\n</code></pre>"},{"location":"extras/altex/#example_bar_normalized","title":"<code>example_bar_normalized</code>","text":"<pre><code>@cache_data\ndef example_bar_normalized():\nbarley = get_barley_data()\nbar_chart(\ndata=barley,\nx=alt.X(\"variety:N\", title=\"Variety\"),\ny=alt.Y(\"sum(yield):Q\", stack=\"normalize\"),\ncolor=\"site:N\",\ntitle=\"A beautiful normalized stacked bar chart\",\n)\n</code></pre>"},{"location":"extras/altex/#example_bar_normalized_custom","title":"<code>example_bar_normalized_custom</code>","text":"<pre><code>@cache_data\ndef example_bar_normalized_custom():\nbarley = get_barley_data()\nbar_chart(\ndata=barley,\nx=alt.X(\"variety\", title=\"Variety\"),\ny=\"sum(yield)\",\ncolor=alt.Color(\"site\", scale=alt.Scale(scheme=\"lighttealblue\"), legend=None),\ntitle=\"A beautiful stacked bar chart (without legend, custom colors)\",\n)\n</code></pre>"},{"location":"extras/altex/#example_bar_grouped","title":"<code>example_bar_grouped</code>","text":"<pre><code>@cache_data\ndef example_bar_grouped():\nbarley = get_barley_data()\nbar_chart(\ndata=barley,\nx=\"year:O\",\ny=\"sum(yield):Q\",\ncolor=\"year:N\",\ncolumn=\"site:N\",\ntitle=\"A beautiful grouped bar charts\",\nwidth=90,\nuse_container_width=False,\n)\n</code></pre>"},{"location":"extras/annotated_text/","title":"\ud83d\udd8a\ufe0f\u00a0\u00a0Annotated text","text":"<p>Submitted by tvst</p>"},{"location":"extras/annotated_text/#summary","title":"Summary","text":"<p>A simple way to display annotated text in Streamlit apps</p>"},{"location":"extras/annotated_text/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/annotated_text/#examples","title":"Examples","text":""},{"location":"extras/annotated_text/#example_1","title":"<code>example_1</code>","text":"<pre><code>def example_1():\nfrom annotated_text import annotated_text\nannotated_text(\n\"This \",\n(\"is\", \"verb\", \"#8ef\"),\n\" some \",\n(\"annotated\", \"adj\", \"#faa\"),\n(\"text\", \"noun\", \"#afa\"),\n\" for those of \",\n(\"you\", \"pronoun\", \"#fea\"),\n\" who \",\n(\"like\", \"verb\", \"#8ef\"),\n\" this sort of \",\n(\"thing\", \"noun\", \"#afa\"),\n)\n</code></pre>"},{"location":"extras/annotated_text/#example_2","title":"<code>example_2</code>","text":"<pre><code>def example_2():\nfrom annotated_text import annotated_text, annotation\nannotated_text(\n\"Hello \",\nannotation(\"world!\", \"noun\", color=\"#8ef\", border=\"1px dashed red\"),\n)\n</code></pre>"},{"location":"extras/app_logo/","title":"\ud83d\udc31\u00a0\u00a0App logo","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/app_logo/#summary","title":"Summary","text":"<p>Add a logo on top of the navigation bar of a multipage app</p>"},{"location":"extras/app_logo/#functions","title":"Functions","text":""},{"location":"extras/app_logo/#add_logo","title":"<code>add_logo</code>","text":"<p>Add a logo (from logo_url) on the top of the navigation page of a multipage app. Taken from https://discuss.streamlit.io/t/put-logo-and-title-above-on-top-of-page-navigation-in-sidebar-of-multipage-app/28213/6</p> <p>The url can either be a url to the image, or a local path to the image.</p> <p>Parameters:</p> Name Type Description Default <code>logo_url</code> <code>str</code> <p>URL/local path of the logo</p> required Source code in <code>src/streamlit_extras/app_logo/__init__.py</code> <pre><code>@extra\ndef add_logo(logo_url: str, height: int = 120):\n\"\"\"Add a logo (from logo_url) on the top of the navigation page of a multipage app.\n    Taken from https://discuss.streamlit.io/t/put-logo-and-title-above-on-top-of-page-navigation-in-sidebar-of-multipage-app/28213/6\n    The url can either be a url to the image, or a local path to the image.\n    Args:\n        logo_url (str): URL/local path of the logo\n    \"\"\"\nif validators.url(logo_url) is True:\nlogo = f\"url({logo_url})\"\nelse:\nlogo = f\"url(data:image/png;base64,{base64.b64encode(Path(logo_url).read_bytes()).decode()})\"\nst.markdown(\nf\"\"\"\n        &lt;style&gt;\n            [data-testid=\"stSidebarNav\"] {{\n                background-image: {logo};\n                background-repeat: no-repeat;\n                padding-top: {height - 40}px;\n                background-position: 20px 20px;\n}}\n        &lt;/style&gt;\n        \"\"\",\nunsafe_allow_html=True,\n)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.app_logo import add_logo # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/badges/","title":"\ud83c\udff7\ufe0f\u00a0\u00a0Badges","text":"<p>Submitted by Arnaud Miribel, ShruAgarwal</p>"},{"location":"extras/badges/#summary","title":"Summary","text":"<p>Create custom badges (e.g. PyPI, Streamlit Cloud, GitHub, Twitter, Buy Me a Coffee)</p>"},{"location":"extras/badges/#functions","title":"Functions","text":""},{"location":"extras/badges/#badge","title":"<code>badge</code>","text":"<p>Easily create a badge!</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>Badge type. Can be \"pypi\", \"github\", \"streamlit\", \"twitter\" or \"buymeacoffee\"</p> required <code>name</code> <code>str</code> <p>Name of the PyPI package, GitHub repository, Twitter's username or BuyMeaCoffee Creator's page name.         Mandatory when using type=\"pypi\", type=\"twitter\" &amp; type=\"buymeacoffee\"</p> <code>None</code> <code>url</code> <code>str</code> <p>URL of the Streamlit Cloud app. Mandatory when using type=\"streamlit\"</p> <code>None</code> Source code in <code>src/streamlit_extras/badges/__init__.py</code> <pre><code>@extra\ndef badge(type: _SUPPORTED_TYPES, name: str | None = None, url: str | None = None):\n\"\"\"Easily create a badge!\n    Args:\n        type (str): Badge type. Can be \"pypi\", \"github\", \"streamlit\", \"twitter\" or \"buymeacoffee\"\n        name (str): Name of the PyPI package, GitHub repository, Twitter's username or BuyMeaCoffee Creator's page name.\n                    Mandatory when using type=\"pypi\", type=\"twitter\" &amp; type=\"buymeacoffee\"\n        url (str): URL of the Streamlit Cloud app. Mandatory when using type=\"streamlit\"\n    \"\"\"\nassert type, \"Type must be given!\"\nassert type in get_args(_SUPPORTED_TYPES), (\nf\"Input type '{type}' is not supported! Supported types are\"\nf\" {get_args(_SUPPORTED_TYPES)}\"\n)\nbadge_html = None\nif type == \"pypi\":\nassert name, \"You must give a valid PyPI package name!\"\nbadge_html = str(\na(href=f\"https://pypi.org/project/{name}\")(\nimg(src=f\"https://badge.fury.io/py/{name}.svg\")\n)\n)\nif type == \"streamlit\":\nassert url, \"You must provide a valid URL for the Streamlit app\"\nbadge_html = str(\na(href=url)(\nimg(\nsrc=\"https://static.streamlit.io/badges/streamlit_badge_black_white.svg\"\n)\n)\n)\nif type == \"github\":\nassert name, (\n\"You must give a valid GitHub repository name! Something like\"\n\" 'author/name'\"\n)\nbadge_html = str(\na(href=f\"https://github.com/{name}\")(\nimg(\nsrc=f\"https://img.shields.io/github/stars/{name}.svg?style=social&amp;label=Star&amp;maxAge=2592000\"\n)\n)\n)\nif type == \"twitter\":\nassert name, \"You must provide a valid twitter username\"\nbadge_html = str(\na(href=f\"https://twitter.com/intent/follow?screen_name={name}\")(\nimg(\nsrc=f\"https://img.shields.io/twitter/follow/{name}?style=social&amp;logo=twitter\"\n)\n)\n)\nif type == \"buymeacoffee\":\nassert name, \"You must provide a valid Buy-Me-a-Coffee page username\"\nbadge_html = str(\na(href=f\"https://www.buymeacoffee.com/{name}\")(\nimg(\nsrc=\"https://img.shields.io/badge/Buy%20me%20a%20coffee--yellow.svg?logo=buy-me-a-coffee&amp;logoColor=orange&amp;style=social\"\n)\n)\n)\nif badge_html is not None:\nst.write(badge_html, unsafe_allow_html=True)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.badges import badge # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/badges/#examples","title":"Examples","text":""},{"location":"extras/badges/#example_pypi","title":"<code>example_pypi</code>","text":"<pre><code>def example_pypi():\nbadge(type=\"pypi\", name=\"plost\")\nbadge(type=\"pypi\", name=\"streamlit\")\n</code></pre>"},{"location":"extras/badges/#example_streamlit","title":"<code>example_streamlit</code>","text":"<pre><code>def example_streamlit():\nbadge(type=\"streamlit\", url=\"https://plost.streamlitapp.com\")\n</code></pre>"},{"location":"extras/badges/#example_github","title":"<code>example_github</code>","text":"<pre><code>def example_github():\nbadge(type=\"github\", name=\"streamlit/streamlit\")\n</code></pre>"},{"location":"extras/badges/#example_twitter","title":"<code>example_twitter</code>","text":"<pre><code>def example_twitter():\nbadge(type=\"twitter\", name=\"streamlit\")\n</code></pre>"},{"location":"extras/badges/#example_buymeacoffee","title":"<code>example_buymeacoffee</code>","text":"<pre><code>def example_buymeacoffee():\nbadge(type=\"buymeacoffee\", name=\"andfanilo\")\n</code></pre>"},{"location":"extras/buy_me_a_coffee/","title":"\u2615\u00a0\u00a0Buy Me a Coffee Button","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/buy_me_a_coffee/#summary","title":"Summary","text":"<p>Adds a floating button which links to your Buy Me a Coffee page</p>"},{"location":"extras/buy_me_a_coffee/#functions","title":"Functions","text":""},{"location":"extras/buy_me_a_coffee/#button","title":"<code>button</code>","text":"Source code in <code>src/streamlit_extras/buy_me_a_coffee/__init__.py</code> <pre><code>@extra\ndef button(\nusername: str,\nfloating: bool = True,\ntext: str = \"Buy me a coffee\",\nemoji: str = \"\",\nbg_color: str = \"#FFDD00\",\nfont: Font = \"Cookie\",\nfont_color: str = \"#000000\",\ncoffee_color: str = \"#000000\",\nwidth: int = 220,\n):\nbutton = f\"\"\"\n        &lt;script type=\"text/javascript\"\n            src=\"https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js\"\n            data-name=\"bmc-button\"\n            data-slug=\"{username}\"\n            data-color=\"{bg_color}\"\n            data-emoji=\"{emoji}\"\n            data-font=\"{font}\"\n            data-text=\"{text}\"\n            data-outline-color=\"#000000\"\n            data-font-color=\"{font_color}\"\n            data-coffee-color=\"{coffee_color}\" &gt;\n        &lt;/script&gt;\n    \"\"\"\nhtml(button, height=70, width=width)\nif floating:\nst.markdown(\nf\"\"\"\n            &lt;style&gt;\n                iframe[width=\"{width}\"] {{\n                    position: fixed;\n                    bottom: 60px;\n                    right: 40px;\n}}\n            &lt;/style&gt;\n            \"\"\",\nunsafe_allow_html=True,\n)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.buy_me_a_coffee import button # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/camera_input_live/","title":"\ud83d\udcf8\u00a0\u00a0Camera input live","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/camera_input_live/#summary","title":"Summary","text":"<p>A camera input that updates a variable number of seconds</p>"},{"location":"extras/camera_input_live/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/capture/","title":"\ud83e\udd45\u00a0\u00a0Capture","text":"<p>Submitted by Alexander Martin</p>"},{"location":"extras/capture/#summary","title":"Summary","text":"<p>Capture utility extensions for the standard streamlit library</p>"},{"location":"extras/capture/#functions","title":"Functions","text":""},{"location":"extras/capture/#redirect","title":"<code>redirect</code>","text":"<p>Redirect STDOUT and STDERR to streamlit functions.</p> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef redirect(src: TextIO, dst: Callable, terminator: str = \"\\n\"):\n\"\"\"Redirect STDOUT and STDERR to streamlit functions.\"\"\"\nwith StringIO() as buffer:\ndef new_write(b):\nbuffer.write(b + terminator)\ndst(buffer.getvalue())\n# Test if we are actually running in the streamlit script thread before we redirect\nif get_script_run_ctx() is not None:\nold_write = src.write\ntry:\nsrc.write = new_write  # type: ignore\nyield\nfinally:\nsrc.write = old_write  # type: ignore\nelse:\nyield\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.capture import redirect # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/capture/#stdout","title":"<code>stdout</code>","text":"<p>Capture STDOUT and redirect it to a callable <code>dst</code>.</p> <p>Parameters:</p> Name Type Description Default <code>dst</code> <code>callable[str]</code> <p>A funciton callable with a single string argument. The entire captured contents will be passed to this function every time a new string is written. It is designed to be compatible with st.empty().* functions as callbacks.</p> required <code>terminator</code> <code>(optional, str)</code> <p>If a <code>terminator</code> is specified, it is added onto each call to stdout.write/print. This defaults to a newline which causes them to display on separate lines within an st.empty.write <code>dst. If using this with st.empty.code as</code>dst<code>it is recommended to set</code>terminator` to empty string.</p> <code>'\\n'</code> <p>Code Example:</p> <pre><code>with st_stdout(st.empty().write):\n    print(\"this will print as if st.write() was called\")\n</code></pre> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef stdout(dst: Callable, terminator=\"\\n\"):\n\"\"\"Capture STDOUT and redirect it to a callable `dst`.\n    Args:\n        dst (callable[str]): A funciton callable with a single string argument. The entire captured contents will be\n            passed to this function every time a new string is written. It is designed to be compatible with\n            st.empty().* functions as callbacks.\n        terminator (optional, str): If a `terminator` is specified, it is added onto each call to stdout.write/print.\n            This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n            If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string.\n    Code Example:\n        with st_stdout(st.empty().write):\n            print(\"this will print as if st.write() was called\")\n    \"\"\"\nwith redirect(sys.stdout, dst, terminator):\nyield\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.capture import stdout # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/capture/#stderr","title":"<code>stderr</code>","text":"<p>Capture STDERR and redirect it to a callable <code>dst</code>.</p> <p>Parameters:</p> Name Type Description Default <code>dst</code> <code>callable[str]</code> <p>A funciton callable with a single string argument. The entire captured contents will be passed to this function every time a new string is written. It is designed to be compatible with st.empty().* functions as callbacks.</p> required <code>terminator</code> <code>(optional, str)</code> <p>If a <code>terminator</code> is specified, it is added onto each call to stdout.write/print. This defaults to a newline which causes them to display on separate lines within an st.empty.write <code>dst. If using this with st.empty.code as</code>dst<code>it is recommended to set</code>terminator` to empty string.</p> <code>'\\n'</code> <p>Code Example:</p> <pre><code>with st_stderr(st.empty().code, terminator=\"\"):\n    print(\"this will print as if st.code() was called\")\n</code></pre> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef stderr(dst: Callable, terminator=\"\\n\"):\n\"\"\"Capture STDERR and redirect it to a callable `dst`.\n    Args:\n        dst (callable[str]): A funciton callable with a single string argument. The entire captured contents will be\n            passed to this function every time a new string is written. It is designed to be compatible with\n            st.empty().* functions as callbacks.\n        terminator (optional, str): If a `terminator` is specified, it is added onto each call to stdout.write/print.\n            This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n            If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string.\n    Code Example:\n        with st_stderr(st.empty().code, terminator=\"\"):\n            print(\"this will print as if st.code() was called\")\n    \"\"\"\nwith redirect(sys.stderr, dst, terminator):\nyield\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.capture import stderr # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/capture/#logcapture","title":"<code>logcapture</code>","text":"<p>Redirect logging to a streamlit function call <code>dst</code>.</p> <p>Parameters:</p> Name Type Description Default <code>dst</code> <code>callable[str]</code> <p>A function callable with a single string argument. The entire log contents will be passed to this function every time a log is written. It is designed to be compatible with st.empty().* functions as callbacks.</p> required <code>terminator</code> <code>(optional, str)</code> <p>If a <code>terminator</code> is specified, it is added onto the end of each log. This defaults to a newline which causes them to display on separate lines within an st.empty.write <code>dst. If using this with st.empty.code as</code>dst<code>it is recommended to set</code>terminator` to empty string.</p> <code>'\\n'</code> <code>from_logger</code> <code>(optional, Logger or logger)</code> <p>The logger from which logs will be captured. Defaults to <code>logging.root</code>.</p> <code>None</code> <code>formatter</code> <code>(optional, Formatter)</code> <p>If specified, the specified formatter will be added to the logging handler to control how logs are displayed.</p> <code>None</code> <p>Code Examples:</p> <pre><code>with st_logging(st.empty().write):\n    logging.info(\"All logs will be output to an st.empty\")\n\nwith st_logging(st.empty().code, terminator=\"\", to_logger=loguru.logger)\n    loguru.logger.info(\"This will also log (if using loguru's logger)\")\n</code></pre> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef logcapture(\ndst: Callable,\nterminator: str = \"\\n\",\nfrom_logger: logging.Logger | None = None,\nformatter: logging.Formatter | None = None,\n):\n\"\"\"Redirect logging to a streamlit function call `dst`.\n        Args:\n            dst (callable[str]): A function callable with a single string argument. The entire log contents will be\n                passed to this function every time a log is written. It is designed to be compatible with st.empty().*\n                functions as callbacks.\n            terminator (optional, str): If a `terminator` is specified, it is added onto the end of each log.\n                This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n                If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string.\n            from_logger (optional, logging.Logger or loguru.logger): The logger from which logs will be captured.\n                Defaults to `logging.root`.\n            formatter (optional, logging.Formatter): If specified, the specified formatter will be added to the logging\n                handler to control how logs are displayed.\n        Code Examples:\n            with st_logging(st.empty().write):\n                logging.info(\"All logs will be output to an st.empty\")\n            with st_logging(st.empty().code, terminator=\"\", to_logger=loguru.logger)\n                loguru.logger.info(\"This will also log (if using loguru's logger)\")\n    \"\"\"\nif not from_logger:\nfrom_logger = logging.getLogger()  # root logger\n# Special-case loguru\nusing_loguru = (\n\"loguru\" in sys.modules and sys.modules[\"loguru\"].logger is from_logger\n)\nwith StringIO() as buffer:\nnew_handler = StreamlitLoggingHandler(buffer)\nnew_handler.set_callback(dst)\nnew_handler.terminator = terminator\nif formatter:\nnew_handler.setFormatter(formatter)\nelif using_loguru:\npass\nelse:\nnew_handler.setFormatter(\nlogging.Formatter(\n\"%(asctime)s - %(levelname)s %(message)s\",\ndatefmt=\"%m/%d/%Y %I:%M:%S %p\",\n)\n)\nhandler_id = None\nif using_loguru:\nhandler_id = from_logger.add(new_handler)  # type: ignore\nelse:\nfrom_logger.addHandler(new_handler)\ntry:\nyield\nfinally:\nif using_loguru:\nfrom_logger.remove(handler_id)  # type: ignore\nelse:\nfrom_logger.removeHandler(new_handler)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.capture import logcapture # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/capture/#examples","title":"Examples","text":""},{"location":"extras/capture/#example_stdout","title":"<code>example_stdout</code>","text":"<pre><code>def example_stdout():\noutput = st.empty()\nwith stdout(output.code, terminator=\"\"):\nprint(\"This is some captured stdout\")\nprint(\"How about that, Isn't it great?\")\nif st.button(\"Click to print more\"):\nprint(\"You added another line!\")\n</code></pre>"},{"location":"extras/capture/#example_stderr","title":"<code>example_stderr</code>","text":"<pre><code>def example_stderr():\noutput = st.empty()\nwith stderr(output.code, terminator=\"\"):\nprint(\"This is some captured stderr\", file=sys.stderr)\nprint(\n\"For this example, though, there aren't any problems...yet\", file=sys.stderr\n)\nif st.button(\"Throw an error!\"):\nprint(\"ERROR: Task failed successfully\", file=sys.stderr)\nprint(\"Psst....stdout isn't captured here\")\n</code></pre>"},{"location":"extras/capture/#example_logcapture","title":"<code>example_logcapture</code>","text":"<pre><code>def example_logcapture():\nlogger = logging.getLogger(\"examplelogger\")\nlogger.setLevel(\"DEBUG\")\nwith logcapture(st.empty().code, from_logger=logger):\nlogger.error(\"Roses are red\")\nlogger.info(\"Violets are blue\")\nlogger.warning(\"This warning is yellow\")\nlogger.debug(\"Your code is broke, too\")\n</code></pre>"},{"location":"extras/card/","title":"\ud83d\udcb3\ufe0f\u00a0\u00a0Card","text":"<p>Submitted by Gamliel Cohen"},{"location":"extras/card/#summary","title":"Summary","text":"<p>Streamlit Component, for a UI card</p>"},{"location":"extras/card/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/chart_annotations/","title":"\u2b07\u00a0\u00a0Chart annotations","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/chart_annotations/#summary","title":"Summary","text":"<p>Add annotations to specific timestamps in your time series in Altair!</p>"},{"location":"extras/chart_annotations/#functions","title":"Functions","text":""},{"location":"extras/chart_annotations/#get_annotations_chart","title":"<code>get_annotations_chart</code>","text":"<p>Creates an Altair Chart with annotation markers on the horizontal axis. Useful to highlight certain events on top of another time series Altair Chart. More here https://share.streamlit.io/streamlit/example-app-time-series-annotation/main</p> <p>Parameters:</p> Name Type Description Default <code>annotations</code> <code>Iterable[Tuple]</code> <p>Iterable of annotations defined by tuples with date and annotation.</p> required <code>y</code> <code>float</code> <p>Height at which the annotation marker should be. Defaults to 0.</p> <code>0</code> <code>min_date</code> <code>str</code> <p>Only annotations older than min_date will be displayed. Defaults to None.</p> <code>None</code> <code>max_date</code> <code>str</code> <p>Only annotations more recent than max_date will be displayed. Defaults to None.</p> <code>None</code> <code>marker</code> <code>str</code> <p>Marker to be used to indicate there is an annotation. Defaults to \"\u2b07\".</p> <code>'\u2b07'</code> <code>marker_size</code> <code>float</code> <p>Size of the marker (font size). Defaults to 20.</p> <code>20</code> <code>marker_offset_x</code> <code>float</code> <p>Horizontal offset. Defaults to 0.</p> <code>0</code> <code>market_offset_y</code> <code>float</code> <p>Vertical offset. Defaults to -10.</p> <code>-10</code> <code>marker_align</code> <code>str</code> <p>Text-align property of the marker (\"left\", \"right\", \"center\"). Defaults to \"center\".</p> <code>'center'</code> <p>Returns:</p> Type Description <code>Chart</code> <p>alt.Chart: Altair Chart with annotation markers on the horizontal axis</p> Source code in <code>src/streamlit_extras/chart_annotations/__init__.py</code> <pre><code>@extra\ndef get_annotations_chart(\nannotations: Iterable[Tuple],\ny: float = 0,\nmin_date: str | None = None,\nmax_date: str | None = None,\nmarker: str = \"\u2b07\",\nmarker_size: float = 20,\nmarker_offset_x: float = 0,\nmarket_offset_y: float = -10,\nmarker_align: str = \"center\",\n) -&gt; alt.Chart:\n\"\"\"\n    Creates an Altair Chart with annotation markers on the horizontal axis.\n    Useful to highlight certain events on top of another time series Altair Chart.\n    More here https://share.streamlit.io/streamlit/example-app-time-series-annotation/main\n    Args:\n        annotations (Iterable[Tuple]): Iterable of annotations defined by tuples with date and annotation.\n        y (float, optional): Height at which the annotation marker should be. Defaults to 0.\n        min_date (str, optional): Only annotations older than min_date will be displayed. Defaults to None.\n        max_date (str, optional): Only annotations more recent than max_date will be displayed. Defaults to None.\n        marker (str, optional): Marker to be used to indicate there is an annotation. Defaults to \"\u2b07\".\n        marker_size (float, optional): Size of the marker (font size). Defaults to 20.\n        marker_offset_x (float, optional): Horizontal offset. Defaults to 0.\n        market_offset_y (float, optional): Vertical offset. Defaults to -10.\n        marker_align (str, optional): Text-align property of the marker (\"left\", \"right\", \"center\"). Defaults to \"center\".\n    Returns:\n        alt.Chart: Altair Chart with annotation markers on the horizontal axis\n    \"\"\"\n# Make a DataFrame for annotations\nannotations_df = pd.DataFrame(\nannotations,\ncolumns=[\"date\", \"annotation\"],\n)\nannotations_df.date = pd.to_datetime(annotations_df.date)\nannotations_df[\"y\"] = y\nif min_date:\nannotations_df = annotations_df[annotations_df.date.gt(min_date)]\nif max_date:\nannotations_df = annotations_df[annotations_df.date.lt(max_date)]\nencode_params = {\"x\": \"date:T\", \"y\": alt.Y(\"y:Q\"), \"tooltip\": \"annotation\"}\nif \"url\" in annotations_df.columns:\nencode_params[\"href\"] = \"url\"\nannotations_chart = (\nalt.Chart(annotations_df)\n.mark_text(\nsize=marker_size,\ntext=marker,\ndy=market_offset_y,\ndx=marker_offset_x,\nalign=marker_align,\ncolor=\"black\",\n)\n.encode(**encode_params)\n)\nreturn annotations_chart\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.chart_annotations import get_annotations_chart # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/chart_container/","title":"\ud83d\uddbc\ufe0f\u00a0\u00a0Chart container","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/chart_container/#summary","title":"Summary","text":"<p>Embed your chart in a nice tabs container to let viewers explore and export its underlying data.</p>"},{"location":"extras/chart_container/#functions","title":"Functions","text":""},{"location":"extras/chart_container/#chart_container","title":"<code>chart_container</code>","text":"<p>Embed chart in a (chart, data, export, explore) tabs container to let the viewer explore and export its underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dataframe used in the dataframe tab.</p> required <code>tabs</code> <code>Sequence</code> <p>Tab labels. Defaults to (\"Chart \ud83d\udcc8\", \"Dataframe \ud83d\udcc4\", \"Export \ud83d\udcc1\").</p> <code>('Chart \ud83d\udcc8', 'Dataframe \ud83d\udcc4', 'Export \ud83d\udcc1')</code> <code>export_formats</code> <code>Sequence</code> <p>Export file formats. Defaults to (\"CSV\", \"Parquet\")</p> <code>_SUPPORTED_EXPORT_KEYS</code> Source code in <code>src/streamlit_extras/chart_container/__init__.py</code> <pre><code>@extra  # type: ignore\n@contextmanager\ndef chart_container(\ndata: pd.DataFrame,\ntabs: Sequence[str] = (\n\"Chart \ud83d\udcc8\",\n\"Dataframe \ud83d\udcc4\",\n\"Export \ud83d\udcc1\",\n),\nexport_formats: Sequence[str] = _SUPPORTED_EXPORT_KEYS,\n) -&gt; Generator:\n\"\"\"Embed chart in a (chart, data, export, explore) tabs container to let the viewer explore and export its underlying data.\n    Args:\n        data (pd.DataFrame): Dataframe used in the dataframe tab.\n        tabs (Sequence, optional): Tab labels. Defaults to (\"Chart \ud83d\udcc8\", \"Dataframe \ud83d\udcc4\", \"Export \ud83d\udcc1\").\n        export_formats (Sequence, optional): Export file formats. Defaults to (\"CSV\", \"Parquet\")\n    \"\"\"\nassert all(\nexport_format in _SUPPORTED_EXPORTS for export_format in export_formats\n), f\"Input format is not supported, please use one within {_SUPPORTED_EXPORTS.keys()}\"\nif \"chart_container_widget_key\" not in st.session_state:\nst.session_state[\"chart_container_widget_key\"] = 0\ndef _get_random_widget_key() -&gt; str:\nst.session_state.chart_container_widget_key += 1\nreturn st.session_state.chart_container_widget_key\ntab_1, tab_2, tab_3 = st.tabs(tabs)\nwith tab_1:\nyield\nwith tab_2:\nst.dataframe(data, use_container_width=True)\nwith tab_3:\nst.caption(\"Export limited to 1 million rows.\")\nexport_data = data.head(1_000_000)\nfor chosen_export_format in export_formats:\nexport_utils = _SUPPORTED_EXPORTS[chosen_export_format]\nexporter = export_utils[\"function\"]\nextension = export_utils[\"extension\"]\nst.download_button(\nf\"Download data as {extension}\",\ndata=exporter(export_data),\nfile_name=\"data\" + extension,\nmime=export_utils.get(\"mime\"),\nkey=_get_random_widget_key(),\n)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.chart_container import chart_container # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/chart_container/#examples","title":"Examples","text":""},{"location":"extras/chart_container/#example_one","title":"<code>example_one</code>","text":"<pre><code>def example_one():\nchart_data = _get_random_data()\nwith chart_container(chart_data):\nst.write(\"Here's a cool chart\")\nst.area_chart(chart_data)\n</code></pre>"},{"location":"extras/chart_container/#example_two","title":"<code>example_two</code>","text":"<pre><code>def example_two():\nchart_data = _get_random_data()\nwith chart_container(chart_data):\nst.write(\n\"I can use a subset of the data for my chart... \"\n\"but still give all the necessary context in \"\n\"`chart_container`!\"\n)\nst.area_chart(chart_data[[\"a\", \"b\"]])\n</code></pre>"},{"location":"extras/colored_header/","title":"\ud83d\udd8c\ufe0f\u00a0\u00a0Color ya Headers","text":"<p>Submitted by Johannes Rieke / Tyler Richards</p>"},{"location":"extras/colored_header/#summary","title":"Summary","text":"<p>This function makes headers much prettier in Streamlit</p>"},{"location":"extras/colored_header/#functions","title":"Functions","text":""},{"location":"extras/colored_header/#colored_header","title":"<code>colored_header</code>","text":"<p>Shows a header with a colored underline and an optional description.</p> Source code in <code>src/streamlit_extras/colored_header/__init__.py</code> <pre><code>@extra\ndef colored_header(\nlabel: str = \"Nice title\",\ndescription: str = \"Cool description\",\ncolor_name: _SUPPORTED_COLORS = \"red-70\",\n):\n\"\"\"\n    Shows a header with a colored underline and an optional description.\n    \"\"\"\nif color_name is None:\ncolor_name = next(HEADER_COLOR_CYCLE)\nst.subheader(label)\nst.write(\nf'&lt;hr style=\"background-color: {color(color_name)}; margin-top: 0;'\n' margin-bottom: 0; height: 3px; border: none; border-radius: 3px;\"&gt;',\nunsafe_allow_html=True,\n)\nif description:\nst.caption(description)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.colored_header import colored_header # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/customize_running/","title":"\ud83c\udfc3\u200d\u2642\ufe0f\u00a0\u00a0Customize running","text":"<p>Submitted by koninhoo</p>"},{"location":"extras/customize_running/#summary","title":"Summary","text":"<p>Customize the running widget</p>"},{"location":"extras/customize_running/#functions","title":"Functions","text":""},{"location":"extras/customize_running/#center_running","title":"<code>center_running</code>","text":"Source code in <code>src/streamlit_extras/customize_running/__init__.py</code> <pre><code>@extra\ndef center_running():\nst.markdown(center_css, unsafe_allow_html=True)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.customize_running import center_running # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/dataframe_explorer/","title":"\ud83d\udd2d\u00a0\u00a0Dataframe explorer UI","text":"<p>Submitted by Streamlit Data Team!</p>"},{"location":"extras/dataframe_explorer/#summary","title":"Summary","text":"<p>Let your viewers explore dataframes themselves! Learn more about it on this blog post</p>"},{"location":"extras/dataframe_explorer/#functions","title":"Functions","text":""},{"location":"extras/dataframe_explorer/#dataframe_explorer","title":"<code>dataframe_explorer</code>","text":"<p>Adds a UI on top of a dataframe to let viewers filter columns</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Original dataframe</p> required <code>case</code> <code>bool</code> <p>If True, text inputs will be case sensitive. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Filtered dataframe</p> Source code in <code>src/streamlit_extras/dataframe_explorer/__init__.py</code> <pre><code>@extra\ndef dataframe_explorer(df: pd.DataFrame, case: bool = True) -&gt; pd.DataFrame:\n\"\"\"\n    Adds a UI on top of a dataframe to let viewers filter columns\n    Args:\n        df (pd.DataFrame): Original dataframe\n        case (bool, optional): If True, text inputs will be case sensitive. Defaults to True.\n    Returns:\n        pd.DataFrame: Filtered dataframe\n    \"\"\"\nrandom_key_base = pd.util.hash_pandas_object(df)\ndf = df.copy()\n# Try to convert datetimes into standard format (datetime, no timezone)\nfor col in df.columns:\nif is_object_dtype(df[col]):\ntry:\ndf[col] = pd.to_datetime(df[col])\nexcept Exception:\npass\nif is_datetime64_any_dtype(df[col]):\ndf[col] = df[col].dt.tz_localize(None)\nmodification_container = st.container()\nwith modification_container:\nto_filter_columns = st.multiselect(\n\"Filter dataframe on\",\ndf.columns,\nkey=f\"{random_key_base}_multiselect\",\n)\nfilters: Dict[str, Any] = dict()\nfor column in to_filter_columns:\nleft, right = st.columns((1, 20))\n# Treat columns with &lt; 10 unique values as categorical\nif is_categorical_dtype(df[column]) or df[column].nunique() &lt; 10:\nleft.write(\"\u21b3\")\nfilters[column] = right.multiselect(\nf\"Values for {column}\",\ndf[column].unique(),\ndefault=list(df[column].unique()),\nkey=f\"{random_key_base}_{column}\",\n)\ndf = df[df[column].isin(filters[column])]\nelif is_numeric_dtype(df[column]):\nleft.write(\"\u21b3\")\n_min = float(df[column].min())\n_max = float(df[column].max())\nstep = (_max - _min) / 100\nfilters[column] = right.slider(\nf\"Values for {column}\",\n_min,\n_max,\n(_min, _max),\nstep=step,\nkey=f\"{random_key_base}_{column}\",\n)\ndf = df[df[column].between(*filters[column])]\nelif is_datetime64_any_dtype(df[column]):\nleft.write(\"\u21b3\")\nfilters[column] = right.date_input(\nf\"Values for {column}\",\nvalue=(\ndf[column].min(),\ndf[column].max(),\n),\nkey=f\"{random_key_base}_{column}\",\n)\nif len(filters[column]) == 2:\nfilters[column] = tuple(map(pd.to_datetime, filters[column]))\nstart_date, end_date = filters[column]\ndf = df.loc[df[column].between(start_date, end_date)]\nelse:\nleft.write(\"\u21b3\")\nfilters[column] = right.text_input(\nf\"Pattern in {column}\",\nkey=f\"{random_key_base}_{column}\",\n)\nif filters[column]:\ndf = df[df[column].str.contains(filters[column], case=case)]\nreturn df\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.dataframe_explorer import dataframe_explorer # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/dataframe_explorer/#examples","title":"Examples","text":""},{"location":"extras/dataframe_explorer/#example_one","title":"<code>example_one</code>","text":"<pre><code>def example_one():\ndataframe = generate_fake_dataframe(\nsize=500, cols=\"dfc\", col_names=(\"date\", \"income\", \"person\"), seed=1\n)\nfiltered_df = dataframe_explorer(dataframe, case=False)\nst.dataframe(filtered_df, use_container_width=True)\n</code></pre>"},{"location":"extras/echo_expander/","title":"\ud83c\udd92\u00a0\u00a0Echo Expander","text":"<p>Submitted by Brian Hess</p>"},{"location":"extras/echo_expander/#summary","title":"Summary","text":"<p>Execute code, and show the code that was executed, but in an expander.</p>"},{"location":"extras/echo_expander/#functions","title":"Functions","text":""},{"location":"extras/echo_expander/#echo_expander","title":"<code>echo_expander</code>","text":"<p>Use in a <code>with</code> block to draw some code on the app, then execute it.</p> <p>Import:</p> <pre><code>from streamlit_extras.echo_expander import echo_expander # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/echo_expander/#src.streamlit_extras.echo_expander.echo_expander--parameters","title":"Parameters","text":"<p>code_location : \"above\" or \"below\"     Whether to show the echoed code before or after the results of the     executed code block.     Default is \"above\" expander : Boolean     Whether the code block should occur in an expander.     If False, then same as <code>st.echo</code>     Default is True label : Text     If expander is True, then the label for the expander.     Default is \"Show code\"</p>"},{"location":"extras/echo_expander/#src.streamlit_extras.echo_expander.echo_expander--example","title":"Example","text":"<p>with st.echo():     st.write('This code will be printed')</p> <p>with st.echo_expander(code_location=\"below\", expander=True, label=\"Expand to see the code\"):     st.write('This code will be printed in an expander')</p> Source code in <code>src/streamlit_extras/echo_expander/__init__.py</code> <pre><code>@extra\n@contextlib.contextmanager\ndef echo_expander(code_location=\"above\", expander=True, label=\"Show code\"):\n\"\"\"Use in a `with` block to draw some code on the app, then execute it.\n    Parameters\n    ----------\n    code_location : \"above\" or \"below\"\n        Whether to show the echoed code before or after the results of the\n        executed code block.\n        Default is \"above\"\n    expander : Boolean\n        Whether the code block should occur in an expander.\n        If False, then same as `st.echo`\n        Default is True\n    label : Text\n        If expander is True, then the label for the expander.\n        Default is \"Show code\"\n    Example\n    -------\n    &gt;&gt;&gt; with st.echo():\n    &gt;&gt;&gt;     st.write('This code will be printed')\n    &gt;&gt;&gt; with st.echo_expander(code_location=\"below\", expander=True, label=\"Expand to see the code\"):\n    &gt;&gt;&gt;     st.write('This code will be printed in an expander')\n    \"\"\"\nfrom streamlit import empty, source_util\nif code_location == \"above\":\nplaceholder = empty()\nelse:\nplaceholder = st\ntry:\n# Get stack frame *before* running the echoed code. The frame's\n# line number will point to the `st.echo` statement we're running.\nframe = traceback.extract_stack()[-3]\nfilename, start_line = frame.filename, frame.lineno\n# Read the file containing the source code of the echoed statement.\nwith source_util.open_python_file(filename) as source_file:\nsource_lines = source_file.readlines()\n# Use ast to parse the Python file and find the code block to display\nimport ast\nap = ast.parse(\"\".join(source_lines))\nap_map = {}\ndef map_ast(a):\nif not hasattr(a, \"body\"):\nreturn\nfor b in a.body:\nap_map[b.lineno] = b\nmap_ast(b)\nmap_ast(ap)\nlines_to_display = source_lines[\nap_map[start_line].body[0].lineno - 1 : ap_map[start_line].end_lineno\n]\ncode_string = textwrap.dedent(\"\".join(lines_to_display))\n# Run the echoed code...\nyield\n# And draw the code string to the app!\nif expander:\nplaceholder.expander(label).code(code_string, \"python\")\nelse:\nplaceholder.code(code_string, \"python\")\nexcept FileNotFoundError as err:\nplaceholder.warning(\"Unable to display code. %s\" % err)\n</code></pre>"},{"location":"extras/embed_code/","title":"\ud83d\udccb\u00a0\u00a0Embed code","text":"<p>Submitted by randyzwitch</p>"},{"location":"extras/embed_code/#summary","title":"Summary","text":"<p>Embed code from various platforms (Gists, snippets...)</p>"},{"location":"extras/embed_code/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/embed_code/#examples","title":"Examples","text":""},{"location":"extras/embed_code/#example_github","title":"<code>example_github</code>","text":"<pre><code>def example_github():\ngithub_gist(\n\"https://gist.github.com/randyzwitch/be8c5e9fb5b8e7b046afebcac12e5087/\",\nwidth=700,\nheight=400,\n)\n</code></pre>"},{"location":"extras/embed_code/#example_gitlab","title":"<code>example_gitlab</code>","text":"<pre><code>def example_gitlab():\ngitlab_snippet(\n\"https://gitlab.com/snippets/1995463\",\nwidth=700,\nheight=200,\n)\n</code></pre>"},{"location":"extras/embed_code/#example_codepen","title":"<code>example_codepen</code>","text":"<pre><code>def example_codepen(codepen_snippet):\ncodepen_snippet(\n\"https://codepen.io/randyzwitch/pen/GRrYrBw\",\nwidth=700,\nheight=400,\n)\n</code></pre>"},{"location":"extras/embed_code/#example_ideone","title":"<code>example_ideone</code>","text":"<pre><code>def example_ideone(ideone_snippet):\nideone_snippet(\n\"https://ideone.com/5V7XZ6\",\nwidth=700,\nheight=400,\n)\n</code></pre>"},{"location":"extras/embed_code/#example_pastebin","title":"<code>example_pastebin</code>","text":"<pre><code>def example_pastebin(pastebin_snippet):\npastebin_snippet(\n\"https://pastebin.com/8QZ7YjYD\",\nwidth=700,\nheight=400,\n)\n</code></pre>"},{"location":"extras/embed_code/#example_tagmycode","title":"<code>example_tagmycode</code>","text":"<pre><code>def example_tagmycode(tagmycode_snippet):\ntagmycode_snippet(\n\"https://tagmycode.com/snippet/1038\",\nwidth=700,\nheight=400,\n)\n</code></pre>"},{"location":"extras/faker/","title":"\ud83e\udd77\u00a0\u00a0Streamlit Faker","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/faker/#summary","title":"Summary","text":"<p>Fake Streamlit commands at the speed of light! Great for prototyping apps.</p>"},{"location":"extras/faker/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/function_explorer/","title":"\ud83d\udc69\u200d\ud83d\ude80\u00a0\u00a0Function explorer","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/function_explorer/#summary","title":"Summary","text":"<p>Give a UI to any Python function! Very alpha though</p>"},{"location":"extras/function_explorer/#functions","title":"Functions","text":""},{"location":"extras/function_explorer/#function_explorer","title":"<code>function_explorer</code>","text":"<p>Gives a Streamlit UI to any function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>callable</code> <p>Python function</p> required Source code in <code>src/streamlit_extras/function_explorer/__init__.py</code> <pre><code>@extra\ndef function_explorer(func: Callable):\n\"\"\"Gives a Streamlit UI to any function.\n    Args:\n        func (callable): Python function\n    \"\"\"\nargs = get_arg_details(func)\ninputs: Dict[str, Any] = dict()\nst.write(\"##### Inputs\")\nst.write(\nf\"Go ahead and play with `{func.__name__}` parameters, see how\"\n\" they change the output!\"\n)\nfor argument_info in args:\nargument, type_hint, default = argument_info.values()\nlabel = argument if not is_empty(default) else f\"{argument}*\"\nif is_empty(type_hint):\ndefault = (\nget_arg_from_session_state(func.__name__, argument) or default\nif not is_empty(default)\nelse \"Sample string\"\n)\ninputs[argument] = st.text_input(label, value=default)\nelse:\nif hasattr(type_hint, \"__name__\"):\nlabel += f\" ({type_hint.__name__})\"\nelif str(type_hint).startswith(\"typing.Literal\"):\nlabel += \" (typing.Literal)\"\nelse:\nraise Exception(f\"Not sure how to handle {type_hint}\")\nif type_hint == int:\ndefault = get_arg_from_session_state(func.__name__, argument) or (\ndefault if not is_empty(default) else 12\n)\ninputs[argument] = st.number_input(label, step=1, value=default)\nelif type_hint == float:\ndefault = (\nget_arg_from_session_state(func.__name__, argument) or default\nif not is_empty(default)\nelse 12.0\n)\ninputs[argument] = st.number_input(label, value=default)\nelif type_hint == str:\nif argument.endswith(\"_color\"):\ndefault = (\nget_arg_from_session_state(func.__name__, argument) or default\nif not is_empty(default)\nelse \"#000000\"\n)\ninputs[argument] = st.color_picker(label, value=default)\nelse:\ndefault = (\nget_arg_from_session_state(func.__name__, argument) or default\nif not is_empty(default)\nelse \"Sample string\"\n)\ninputs[argument] = st_keyup(label, value=default)\nelif type_hint == bool:\ndefault = (\nget_arg_from_session_state(func.__name__, argument) or default\nif not is_empty(default)\nelse True\n)\ninputs[argument] = st.checkbox(label, value=default)\nelif type_hint == pd.DataFrame:\ninputs[argument] = get_arg_from_session_state(\nfunc.__name__, argument\n) or pd.DataFrame([\"abcde\"])\nelif str(type_hint).startswith(\"typing.Literal\"):\noptions = get_args(type_hint)\ndefault = (\nget_arg_from_session_state(func.__name__, argument) or default\nif not is_empty(default)\nelse options[0]\n)\nidx = options.index(default)\ninputs[argument] = st.selectbox(label, options, index=idx)\nelse:\nst.warning(f\"`function_explorer` does not support type {type_hint}\")\nst.write(\"##### Output\")\nfunc(**inputs)\nif func.__name__ not in st.session_state:\nst.session_state[func.__name__] = {}\nst.session_state[func.__name__][\"inputs\"] = inputs\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.function_explorer import function_explorer # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/grid/","title":"\ud83d\udca0\u00a0\u00a0Grid Layout","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/grid/#summary","title":"Summary","text":"<p>A multi-element container that places elements on a specified grid layout.</p>"},{"location":"extras/grid/#functions","title":"Functions","text":""},{"location":"extras/grid/#grid","title":"<code>grid</code>","text":"<p>Insert a multi-element, grid container into your app.</p> <p>This function inserts a container into your app that arranges multiple elements in a grid layout as defined by the provided spec. Elements can be added to the returned container by calling methods directly on the returned object.</p> <p>Import:</p> <pre><code>from streamlit_extras.grid import grid # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/grid/#src.streamlit_extras.grid.grid--parameters","title":"Parameters","text":"<p>*spec : int or iterable of numbers     One or many row specs controlling the number and width of cells in each row.     Each spec can be one of:</p> <pre><code>* An integer specifying the number of cells. In this case, all cells have equal\nwidth.\n* An iterable of numbers (int or float) specifying the relative width of\neach cell. E.g., ``[0.7, 0.3]`` creates two cells, the first\none occupying 70% of the available width and the second one 30%.\nOr, ``[1, 2, 3]`` creates three cells where the second one is twice\nas wide as the first one, and the third one is three times that width.\n\nThe function iterates over the provided specs in a round-robin order. Upon filling a row,\nit moves on to the next spec, or the first spec if there are no\nmore specs.\n</code></pre> \"small\", \"medium\", or \"large\" <p>The size of the gap between cells, specified as \"small\", \"medium\", or \"large\". This parameter defines the visual space between grid cells. Defaults to \"small\".</p> \"top\", \"center\", or \"bottom\" <p>The vertical alignment of the cells in the row. It can be either \"top\", \"center\", or \"bottom\", aligning the contents of each cell accordingly. Defaults to \"top\".</p>"},{"location":"extras/grid/#src.streamlit_extras.grid.grid--returns","title":"Returns","text":"<p>GridContainer     A grid container object. Elements can be added to this grid by calling methods     directly on the returned object.</p> Source code in <code>src/streamlit_extras/grid/__init__.py</code> <pre><code>@extra\ndef grid(\n*spec: SpecType,\ngap: Optional[str] = \"small\",\nvertical_align: Literal[\"top\", \"center\", \"bottom\"] = \"top\",\n):\n\"\"\"\n    Insert a multi-element, grid container into your app.\n    This function inserts a container into your app that arranges\n    multiple elements in a grid layout as defined by the provided spec.\n    Elements can be added to the returned container by calling methods directly\n    on the returned object.\n    Parameters\n    ----------\n    *spec : int or iterable of numbers\n        One or many row specs controlling the number and width of cells in each row.\n        Each spec can be one of:\n        * An integer specifying the number of cells. In this case, all cells have equal\n        width.\n        * An iterable of numbers (int or float) specifying the relative width of\n        each cell. E.g., ``[0.7, 0.3]`` creates two cells, the first\n        one occupying 70% of the available width and the second one 30%.\n        Or, ``[1, 2, 3]`` creates three cells where the second one is twice\n        as wide as the first one, and the third one is three times that width.\n        The function iterates over the provided specs in a round-robin order. Upon filling a row,\n        it moves on to the next spec, or the first spec if there are no\n        more specs.\n    gap : \"small\", \"medium\", or \"large\"\n        The size of the gap between cells, specified as \"small\", \"medium\", or \"large\".\n        This parameter defines the visual space between grid cells. Defaults to \"small\".\n    vertical_align : \"top\", \"center\", or \"bottom\"\n        The vertical alignment of the cells in the row. It can be either \"top\",\n        \"center\", or \"bottom\", aligning the contents of each cell accordingly. Defaults to \"top\".\n    Returns\n    -------\n    GridContainer\n        A grid container object. Elements can be added to this grid by calling methods\n        directly on the returned object.\n    \"\"\"\ncontainer = stylable_container.stylable_container(\nkey=f\"grid_{vertical_align}\",\ncss_styles=[\n\"\"\"\ndiv[data-testid=\"column\"] &gt; div {\nheight: 100%;\n}\n\"\"\",\nf\"\"\"\ndiv[data-testid=\"column\"] &gt; div &gt; div[data-testid=\"stVerticalBlock\"] &gt; div.element-container {{\n{\"margin-top: auto;\" if vertical_align in [\"center\", \"bottom\"] else \"\"}\n{\"margin-bottom: auto;\" if vertical_align == \"center\" else \"\"}\n}}\n\"\"\",\n],\n)\nreturn GridDeltaGenerator(\nparent_dg=container, spec=list(spec), gap=gap, repeat=True\n)\n</code></pre>"},{"location":"extras/image_coordinates/","title":"\ud83c\udfaf\u00a0\u00a0Streamlit Image Coordinates","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/image_coordinates/#summary","title":"Summary","text":"<p>Allows you to add an image to your app, and get the coordinates of where the user last clicked on the image.</p>"},{"location":"extras/image_coordinates/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/image_in_tables/","title":"\ud83d\udea9\u00a0\u00a0Image in tables","text":"<p>Submitted by dataprofessor</p>"},{"location":"extras/image_in_tables/#summary","title":"Summary","text":"<p>Transform URLs into images in your dataframes</p>"},{"location":"extras/image_in_tables/#functions","title":"Functions","text":""},{"location":"extras/image_in_tables/#table_with_images","title":"<code>table_with_images</code>","text":"Source code in <code>src/streamlit_extras/image_in_tables/__init__.py</code> <pre><code>@extra\n@cache_data\ndef table_with_images(df: pd.DataFrame, url_columns: Iterable):\ndf_ = df.copy()\n@cache_data\ndef _path_to_image_html(path):\nreturn '&lt;img src=\"' + path + '\" width=\"60\" &gt;'\nfor column in url_columns:\ndf_[column] = df_[column].apply(_path_to_image_html)\nreturn df_.to_html(escape=False)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.image_in_tables import table_with_images # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/keyboard_text/","title":"\u2328\ufe0f\u00a0\u00a0Keyboard text","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/keyboard_text/#summary","title":"Summary","text":"<p>Create a keyboard styled text</p>"},{"location":"extras/keyboard_text/#functions","title":"Functions","text":""},{"location":"extras/keyboard_text/#key","title":"<code>key</code>","text":"<p>Applies a custom CSS to input text which makes it look like a keyboard key. To be used after running load_key_css() at least once in the app!</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text that will be styled as a key</p> required <code>write</code> <code>bool</code> <p>If True, this will st.write() the key</p> <code>True</code> <p>Returns:     str: HTML of the text, styled as a key</p> Source code in <code>src/streamlit_extras/keyboard_text/__init__.py</code> <pre><code>@extra\ndef key(text: str, write: bool = True) -&gt; str:\n\"\"\"Applies a custom CSS to input text which makes it look like a keyboard key.\n    To be used after running load_key_css() at least once in the app!\n    Args:\n        text (str): Text that will be styled as a key\n        write (bool): If True, this will st.write() the key\n    Returns:\n        str: HTML of the text, styled as a key\n    \"\"\"\nkey_html = str(span(_class=\"keyx\")(text))\nif write:\nst.write(key_html, unsafe_allow_html=True)\nreturn key_html\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.keyboard_text import key # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/keyboard_text/#examples","title":"Examples","text":""},{"location":"extras/keyboard_text/#example_default","title":"<code>example_default</code>","text":"<pre><code>def example_default():\nload_key_css()\nkey(\"\u2318+K\")\n</code></pre>"},{"location":"extras/keyboard_text/#example_inline","title":"<code>example_inline</code>","text":"<pre><code>def example_inline():\nload_key_css()\nst.write(\nf\"Also works inline! Example: {key('\u2318+K', write=False)}\",\nunsafe_allow_html=True,\n)\n</code></pre>"},{"location":"extras/keyboard_url/","title":"\ud83c\udfaf\u00a0\u00a0Keyboard to URL","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/keyboard_url/#summary","title":"Summary","text":"<p>Create bindings so that hitting a key on your keyboard opens an URL in a new tab!</p>"},{"location":"extras/keyboard_url/#functions","title":"Functions","text":""},{"location":"extras/keyboard_url/#keyboard_to_url","title":"<code>keyboard_to_url</code>","text":"<p>Map a keyboard key to open a new tab with a given URL. Args:     key (str, optional): Key to trigger (example 'k'). Defaults to None.     key_code (int, optional): If key doesn't work, try hard-coding the key_code instead. Defaults to None.     url (str, optional): Opens the input URL in new tab. Defaults to None.</p> Source code in <code>src/streamlit_extras/keyboard_url/__init__.py</code> <pre><code>@extra\ndef keyboard_to_url(\nkey: str | None = None,\nkey_code: int | None = None,\nurl: str | None = None,\n):\n\"\"\"Map a keyboard key to open a new tab with a given URL.\n    Args:\n        key (str, optional): Key to trigger (example 'k'). Defaults to None.\n        key_code (int, optional): If key doesn't work, try hard-coding the key_code instead. Defaults to None.\n        url (str, optional): Opens the input URL in new tab. Defaults to None.\n    \"\"\"\nassert not (\nkey and key_code\n), \"\"\"You can not provide key and key_code.\n    Either give key and we'll try to find its associated key_code. Or directly\n    provide the key_code.\"\"\"\nassert (key or key_code) and url, \"\"\"You must provide key or key_code, and a URL\"\"\"\nif key:\nkey_code_js_row = f\"const keyCode = '{key}'.toUpperCase().charCodeAt(0);\"\nelif key_code:\nkey_code_js_row = f\"const keyCode = {key_code};\"\nelse:\nraise ValueError(\"You must provide key or key_code\")\ncomponents.html(\nf\"\"\"\n&lt;script&gt;\nconst doc = window.parent.document;\nbuttons = Array.from(doc.querySelectorAll('button[kind=primary]'));\n{key_code_js_row}\ndoc.addEventListener('keydown', function(e) {{\n    e = e || window.event;\n    var target = e.target || e.srcElement;\n    // Only trigger the events if they're not happening in an input/textarea/select/button field\n    if ( !/INPUT|TEXTAREA|SELECT|BUTTON/.test(target.nodeName) ) {{\n        switch (e.keyCode) {{\n            case keyCode:\n                window.open('{url}', '_blank').focus();\n                break;\n}}\n}}\n}});\n&lt;/script&gt;\n\"\"\",\nheight=0,\nwidth=0,\n)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.keyboard_url import keyboard_to_url # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/let_it_rain/","title":"\ud83c\udf27\ufe0f\u00a0\u00a0Let emojis rain","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/let_it_rain/#summary","title":"Summary","text":"<p>Use this to create more animations like st.balloons() and st.snow()</p>"},{"location":"extras/let_it_rain/#functions","title":"Functions","text":""},{"location":"extras/let_it_rain/#rain","title":"<code>rain</code>","text":"<p>Creates a CSS animation where input emoji falls from top to bottom of the screen.</p> Source code in <code>src/streamlit_extras/let_it_rain/__init__.py</code> <pre><code>@extra\ndef rain(\nemoji: str,\nfont_size: int = 64,\nfalling_speed: int = 5,\nanimation_length: Union[int, str] = \"infinite\",\n):\n\"\"\"\n    Creates a CSS animation where input emoji falls from top to bottom of the screen.\n    \"\"\"\nif isinstance(animation_length, int):\nanimation_length = f\"{animation_length}\"\nst.write(\nf\"\"\"\n    &lt;style&gt;\n    body {{\n    background: gray;\n}}\n    .emoji {{\n    color: #777;\n    font-size: {font_size}px;\n    font-family: Arial;\n    // text-shadow: 0 0 5px #000;\n}}\n    ///*delete for no hover-effect*/\n    //.emoji:hover {{\n    //  font-size: 60px;\n    //  text-shadow: 5px 5px 5px white;\n    //}}\n    @-webkit-keyframes emojis-fall {{\n    0% {{\n        top: -10%;\n}}\n    100% {{\n        top: 100%;\n}}\n}}\n    @-webkit-keyframes emojis-shake {{\n    0% {{\n        -webkit-transform: translateX(0px);\n        transform: translateX(0px);\n}}\n    50% {{\n        -webkit-transform: translateX(20px);\n        transform: translateX(20px);\n}}\n    100% {{\n        -webkit-transform: translateX(0px);\n        transform: translateX(0px);\n}}\n}}\n    @keyframes emojis-fall {{\n    0% {{\n        top: -10%;\n}}\n    100% {{\n        top: 100%;\n}}\n}}\n    @keyframes emojis-shake {{\n    0% {{\n        transform: translateX(0px);\n}}\n    25% {{\n        transform: translateX(15px);\n}}\n    50% {{\n        transform: translateX(-15px);\n}}\n    100% {{\n        transform: translateX(0px);\n}}\n}}\n    .emoji {{\n    position: fixed;\n    top: -10%;\n    z-index: 99999;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    cursor: default;\n    -webkit-animation-name: emojis-fall, emojis-shake;\n    -webkit-animation-duration: 5s, 3s;\n    -webkit-animation-timing-function: linear, ease-in-out;\n    -webkit-animation-iteration-count: {animation_length}, {animation_length}; // overall length\n    -webkit-animation-play-state: running, running;\n    animation-name: emojis-fall, emojis-shake;\n    animation-duration: {falling_speed}s, 3s;  // fall speed\n    animation-timing-function: linear, ease-in-out;\n    animation-iteration-count: {animation_length}, {animation_length}; // overall length\n    animation-play-state: running, running;\n}}\n    .emoji:nth-of-type(0) {{\n    left: 1%;\n    -webkit-animation-delay: 0s, 0s;\n    animation-delay: 0s, 0s;\n}}\n    .emoji:nth-of-type(1) {{\n    left: 10%;\n    -webkit-animation-delay: 1s, 1s;\n    animation-delay: 1s, 1s;\n}}\n    .emoji:nth-of-type(2) {{\n    left: 20%;\n    -webkit-animation-delay: 6s, 0.5s;\n    animation-delay: 6s, 0.5s;\n}}\n    .emoji:nth-of-type(3) {{\n    left: 30%;\n    -webkit-animation-delay: 4s, 2s;\n    animation-delay: 4s, 2s;\n}}\n    .emoji:nth-of-type(4) {{\n    left: 40%;\n    -webkit-animation-delay: 2s, 2s;\n    animation-delay: 2s, 2s;\n}}\n    .emoji:nth-of-type(5) {{\n    left: 50%;\n    -webkit-animation-delay: 8s, 3s;\n    animation-delay: 8s, 3s;\n}}\n    .emoji:nth-of-type(6) {{\n    left: 60%;\n    -webkit-animation-delay: 6s, 2s;\n    animation-delay: 6s, 2s;\n}}\n    .emoji:nth-of-type(7) {{\n    left: 70%;\n    -webkit-animation-delay: 2.5s, 1s;\n    animation-delay: 2.5s, 1s;\n}}\n    .emoji:nth-of-type(8) {{\n    left: 80%;\n    -webkit-animation-delay: 1s, 0s;\n    animation-delay: 1s, 0s;\n}}\n    .emoji:nth-of-type(9) {{\n    left: 90%;\n    -webkit-animation-delay: 3s, 1.5s;\n    animation-delay: 3s, 1.5s;\n}}\n    &lt;/style&gt;\n    \"\"\",\nunsafe_allow_html=True,\n)\nst.write(\nf\"\"\"\n    &lt;!--get emojis from https://getemoji.com--&gt;\n    &lt;div class=\"emojis\"&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n    &lt;/div&gt;\n    \"\"\",\nunsafe_allow_html=True,\n)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.let_it_rain import rain # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/mandatory_date_range/","title":"\ud83d\udcc5\u00a0\u00a0Mandatory Date Range Picker","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/mandatory_date_range/#summary","title":"Summary","text":"<p>Just like st.date_input, but enforces that it always and only returns a start and end date, even if the user has only selected one of the dates. Until the user selects both dates, the app will not run.</p>"},{"location":"extras/mandatory_date_range/#functions","title":"Functions","text":""},{"location":"extras/mandatory_date_range/#date_range_picker","title":"<code>date_range_picker</code>","text":"<p>Working with date_input with a date range is frustrating becuase if you're assuming you will get a start and end date out of it, your code can break (not to mention your type hints), because if a user clicks on just one date, the app will go ahead and run with a single output. This widget enforces a start and end date being selected, and will stop the app if only one is chosen.</p> <p>Defaults to a range of 30 days ago to today</p> <p>Returns the selected start and end date</p> Source code in <code>src/streamlit_extras/mandatory_date_range/__init__.py</code> <pre><code>@extra\ndef date_range_picker(\ntitle: str,\ndefault_start: Optional[date] = None,\ndefault_end: Optional[date] = None,\nmin_date: Optional[date] = None,\nmax_date: Optional[date] = None,\nerror_message: str = \"Please select start and end date\",\nkey: Optional[str] = None,\n) -&gt; Tuple[date, date]:\n\"\"\"\n    Working with date_input with a date range is frustrating becuase if you're\n    assuming you will get a start and end date out of it, your code can break (not\n    to mention your type hints), because if a user clicks on just one date, the app\n    will go ahead and run with a single output. This widget enforces a start and\n    end date being selected, and will stop the app if only one is chosen.\n    Defaults to a range of 30 days ago to today\n    Returns the selected start and end date\n    \"\"\"\nif default_start is None:\ndefault_start = date.today() - timedelta(days=30)\nif default_end is None:\ndefault_end = date.today()\nval = st.date_input(\ntitle,\nvalue=[default_start, default_end],\nmin_value=min_date,\nmax_value=max_date,\nkey=key,\n)\ntry:\nstart_date, end_date = cast(Tuple[date, date], val)\nexcept ValueError:\nst.error(error_message)\nst.stop()\nreturn start_date, end_date\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.mandatory_date_range import date_range_picker # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/markdownlit/","title":"\u303d\ufe0f\u00a0\u00a0Markdownlit","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/markdownlit/#summary","title":"Summary","text":"<p>markdownlit adds a set of lit Markdown commands for your Streamlit apps!</p>"},{"location":"extras/markdownlit/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/markdownlit/#examples","title":"Examples","text":""},{"location":"extras/markdownlit/#example_link_and_colors","title":"<code>example_link_and_colors</code>","text":"<pre><code>def example_link_and_colors():\nmdlit(\n\"\"\"Tired from [default links](https://extras.streamlit.app)?\n    Me too! Discover Markdownlit's `@()` operator. Just insert a link and it\n    will figure a nice icon and label for you!\n    Example: @(https://extras.streamlit.app)... better, right? You can\n    also @(\ud83c\udf50)(manually set the label if you want)(https://extras.streamlit.app)\n    btw, and play with a [red]beautiful[/red] [blue]set[/blue] [orange]of[/orange]\n    [violet]colors[/violet]. Another perk is those beautiful arrows -&gt; &lt;-\n    \"\"\"\n)\n</code></pre>"},{"location":"extras/markdownlit/#example_collapsible_content","title":"<code>example_collapsible_content</code>","text":"<pre><code>def example_collapsible_content():\nmdlit(\ntextwrap.dedent(\n\"\"\"\n    ??? Bonus\n        @(\ud83c\udf81)(A very insightful tutorial)(https://www.youtube.com/watch?v=dQw4w9WgXcQ)\n    \"\"\"\n)\n)\n</code></pre>"},{"location":"extras/mention/","title":"\ud83e\udef5\u00a0\u00a0Mentions","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/mention/#summary","title":"Summary","text":"<p>Create nice links with icons, like Notion mentions!</p>"},{"location":"extras/mention/#functions","title":"Functions","text":""},{"location":"extras/mention/#mention","title":"<code>mention</code>","text":"<p>Mention a link with a label and icon.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Label to use in the mention</p> required <code>icon</code> <code>str</code> <p>Icon to use. Can be an emoji or a URL. Default '\ud83d\udd17'</p> <code>'\ud83d\udd17'</code> <code>url</code> <code>str</code> <p>Target URL of the mention</p> required <code>write</code> <code>bool</code> <p>Writes the mention directly. If False, returns the raw HTML.           Useful if mention is used inline.</p> <code>True</code> Source code in <code>src/streamlit_extras/mention/__init__.py</code> <pre><code>@extra\ndef mention(label: str, url: str, icon: str = \"\ud83d\udd17\", write: bool = True):\n\"\"\"Mention a link with a label and icon.\n    Args:\n        label (str): Label to use in the mention\n        icon (str): Icon to use. Can be an emoji or a URL. Default '\ud83d\udd17'\n        url (str): Target URL of the mention\n        write (bool): Writes the mention directly. If False, returns the raw HTML.\n                      Useful if mention is used inline.\n    \"\"\"\nif icon.lower() == \"github\":\nicon = GITHUB_ICON\nelif icon.lower() == \"notion\":\nicon = NOTION_ICON\nelif icon.lower() == \"twitter\":\nicon = TWITTER_ICON\nelif icon.lower() == \"streamlit\":\nicon = STREAMLIT_ICON\nif validate_url(icon):\nicon_html = img(\nsrc=icon,\nstyle=\"width:1em;height:1em;vertical-align:-0.15em;border-radius:3px;margin-right:0.3em\",\n)\nelse:\nicon_html = icon + \"\u00a0\u00a0\"\nmention_html = a(\ncontenteditable=False,\nhref=url,\nrel=\"noopener noreferrer\",\nstyle=\"color:inherit;text-decoration:inherit; height:auto!important\",\ntarget=\"_blank\",\n)(\nspan(),\nicon_html,\nspan(\nstyle=(\n\"border-bottom:0.05em solid\"\n\" rgba(55,53,47,0.25);font-weight:500;flex-shrink:0\"\n)\n)(label),\nspan(),\n)\nhtml = STYLE_HTML + str(mention_html)\nif write:\nst.write(html, unsafe_allow_html=True)\nelse:\nreturn html\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.mention import mention # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/mention/#examples","title":"Examples","text":""},{"location":"extras/mention/#example_1","title":"<code>example_1</code>","text":"<pre><code>def example_1():\nmention(\nlabel=\"An awesome Streamlit App\",\nicon=\"streamlit\",  # Some icons are available... like Streamlit!\nurl=\"https://extras.streamlitapp.com\",\n)\n</code></pre>"},{"location":"extras/mention/#example_2","title":"<code>example_2</code>","text":"<pre><code>def example_2():\nmention(\nlabel=\"streamlit-extras\",\nicon=\"\ud83e\udea2\",  # You can also just use an emoji\nurl=\"https://github.com/arnaudmiribel/streamlit-extras\",\n)\n</code></pre>"},{"location":"extras/mention/#example_3","title":"<code>example_3</code>","text":"<pre><code>def example_3():\nmention(\nlabel=\"example-app-cv-model\",\nicon=\"github\",  # GitHub is also featured!\nurl=\"https://github.com/streamlit/example-app-cv-model\",\n)\n</code></pre>"},{"location":"extras/mention/#example_4","title":"<code>example_4</code>","text":"<pre><code>def example_4():\nmention(\nlabel=\"That page somewhere in Notion\",\nicon=\"notion\",  # Notion is also featured!\nurl=\"https://notion.so\",\n)\n</code></pre>"},{"location":"extras/mention/#example_5","title":"<code>example_5</code>","text":"<pre><code>def example_5():\ninline_mention = mention(\nlabel=\"streamlit\",\nicon=\"twitter\",  # Twitter is also featured!\nurl=\"https://www.twitter.com/streamlit\",\nwrite=False,\n)\nst.write(\nf\"Here's how to use the mention inline:  {inline_mention}. Cool\" \" right?\",\nunsafe_allow_html=True,\n)\n</code></pre>"},{"location":"extras/metric_cards/","title":"\u2660\ufe0f\u00a0\u00a0Metric Cards","text":"<p>Submitted by Chanin Nantasenamat</p>"},{"location":"extras/metric_cards/#summary","title":"Summary","text":"<p>Restyle metrics as cards</p>"},{"location":"extras/metric_cards/#functions","title":"Functions","text":""},{"location":"extras/metric_cards/#style_metric_cards","title":"<code>style_metric_cards</code>","text":"Source code in <code>src/streamlit_extras/metric_cards/__init__.py</code> <pre><code>@extra\ndef style_metric_cards(\nbackground_color: str = \"#FFF\",\nborder_size_px: int = 1,\nborder_color: str = \"#CCC\",\nborder_radius_px: int = 5,\nborder_left_color: str = \"#9AD8E1\",\nbox_shadow: bool = True,\n):\nbox_shadow_str = (\n\"box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15) !important;\"\nif box_shadow\nelse \"box-shadow: none !important;\"\n)\nst.markdown(\nf\"\"\"\n        &lt;style&gt;\n            div[data-testid=\"metric-container\"] {{\n                background-color: {background_color};\n                border: {border_size_px}px solid {border_color};\n                padding: 5% 5% 5% 10%;\n                border-radius: {border_radius_px}px;\n                border-left: 0.5rem solid {border_left_color} !important;\n{box_shadow_str}\n}}\n        &lt;/style&gt;\n        \"\"\",\nunsafe_allow_html=True,\n)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.metric_cards import style_metric_cards # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/no_default_selectbox/","title":"\ud83d\uddf3\ufe0f\u00a0\u00a0No-Default Selectbox","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/no_default_selectbox/#summary","title":"Summary","text":"<p>Just like st.selectbox, but with no default value -- returns None if nothing is selected.</p> <p>Meant to be a solution to https://github.com/streamlit/streamlit/issues/949</p>"},{"location":"extras/no_default_selectbox/#functions","title":"Functions","text":""},{"location":"extras/no_default_selectbox/#selectbox","title":"<code>selectbox</code>","text":"<p>A selectbox that returns None unless the user has explicitly selected one of the options.</p> <p>All arguments are passed to st.selectbox except for <code>no_selection_label</code>, which is used to specify the label of the option that represents no selection.</p> <p>Import:</p> <pre><code>from streamlit_extras.no_default_selectbox import selectbox # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/no_default_selectbox/#src.streamlit_extras.no_default_selectbox.selectbox--parameters","title":"Parameters","text":"<p>no_selection_label : str     The label to use for the no-selection option. Defaults to \"---\".</p> Source code in <code>src/streamlit_extras/no_default_selectbox/__init__.py</code> <pre><code>@extra\ndef selectbox(*args, **kwargs):\n\"\"\"A selectbox that returns None unless the user has explicitly selected one of the\n    options.\n    All arguments are passed to st.selectbox except for `no_selection_label`, which is\n    used to specify the label of the option that represents no selection.\n    Parameters\n    ----------\n    no_selection_label : str\n        The label to use for the no-selection option. Defaults to \"---\".\n    \"\"\"\nno_selection_label, _args, _kwargs = _transform_arguments(*args, **kwargs)\nresult = st.selectbox(*_args, **_kwargs)\nif result == no_selection_label:\nreturn None\nreturn result\n</code></pre>"},{"location":"extras/row/","title":"\ud83d\udff0\u00a0\u00a0Row Layout","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/row/#summary","title":"Summary","text":"<p>A multi-element horizontal container that places elements in a row.</p>"},{"location":"extras/row/#functions","title":"Functions","text":""},{"location":"extras/row/#row","title":"<code>row</code>","text":"<p>Insert a multi-element, horizontal container into your app.</p> <p>This function inserts a container into your app that can hold a number of elements as defined in the provided spec. Elements can be added to the returned container by calling methods directly on the returned object.</p> <p>Import:</p> <pre><code>from streamlit_extras.row import row # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/row/#src.streamlit_extras.row.row--parameters","title":"Parameters","text":"<p>spec : int or iterable of numbers     Controls the number and width of cells to insert in the row. Can be one of:</p> <pre><code>* An integer specifying the number of cells. All cells will have equal\nwidth in this case.\n* An iterable of numbers (int or float) that specifies the relative width of\neach cell. For instance, ``[0.7, 0.3]`` creates two cells where the first\none occupies 70% of the available width, and the second one occupies 30%.\nOr, ``[1, 2, 3]`` creates three cells where the second one is twice\nas wide as the first one, and the third one is three times that width.\n</code></pre> \"small\", \"medium\", or \"large\" <p>The size of the gap between cells, can be \"small\", \"medium\", or \"large\". This parameter specifies the visual space between the elements within the row. Defaults to \"small\".</p> \"top\", \"center\", or \"bottom\" <p>The vertical alignment of the cells in the row. It can be either \"top\", \"center\", or \"bottom\", aligning the contents of each cell accordingly. Defaults to \"top\".</p>"},{"location":"extras/row/#src.streamlit_extras.row.row--returns","title":"Returns","text":"<p>RowContainer     A row container object. Elements can be added to this row by calling methods directly     on the returned object.</p> Source code in <code>src/streamlit_extras/row/__init__.py</code> <pre><code>@extra\ndef row(\nspec: SpecType,\ngap: Optional[str] = \"small\",\nvertical_align: Literal[\"top\", \"center\", \"bottom\"] = \"top\",\n) -&gt; grid.GridDeltaGenerator:\n\"\"\"\n    Insert a multi-element, horizontal container into your app.\n    This function inserts a container into your app that can hold\n    a number of elements as defined in the provided spec. Elements can be added\n    to the returned container by calling methods directly on the returned object.\n    Parameters\n    ----------\n    spec : int or iterable of numbers\n        Controls the number and width of cells to insert in the row. Can be one of:\n        * An integer specifying the number of cells. All cells will have equal\n        width in this case.\n        * An iterable of numbers (int or float) that specifies the relative width of\n        each cell. For instance, ``[0.7, 0.3]`` creates two cells where the first\n        one occupies 70% of the available width, and the second one occupies 30%.\n        Or, ``[1, 2, 3]`` creates three cells where the second one is twice\n        as wide as the first one, and the third one is three times that width.\n    gap : \"small\", \"medium\", or \"large\"\n        The size of the gap between cells, can be \"small\", \"medium\", or \"large\".\n        This parameter specifies the visual space between the elements within the row. Defaults to \"small\".\n    vertical_align : \"top\", \"center\", or \"bottom\"\n        The vertical alignment of the cells in the row. It can be either \"top\",\n        \"center\", or \"bottom\", aligning the contents of each cell accordingly. Defaults to \"top\".\n    Returns\n    -------\n    RowContainer\n        A row container object. Elements can be added to this row by calling methods directly\n        on the returned object.\n    \"\"\"\ncontainer = stylable_container.stylable_container(\nkey=f\"row_{vertical_align}\",\ncss_styles=[\n\"\"\"\ndiv[data-testid=\"column\"] &gt; div {\nheight: 100%;\n}\n\"\"\",\nf\"\"\"\ndiv[data-testid=\"column\"] &gt; div &gt; div[data-testid=\"stVerticalBlock\"] &gt; div.element-container {{\n{\"margin-top: auto;\" if vertical_align in [\"center\", \"bottom\"] else \"\"}\n{\"margin-bottom: auto;\" if vertical_align == \"center\" else \"\"}\n}}\n\"\"\",\n],\n)\nreturn grid.GridDeltaGenerator(parent_dg=container, spec=[spec], gap=gap)\n</code></pre>"},{"location":"extras/sandbox/","title":"\ud83d\udce6\u00a0\u00a0Stlite Sandbox","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/sandbox/#summary","title":"Summary","text":"<p>Execute untrusted Streamlit code in a sandboxed environment.</p>"},{"location":"extras/sandbox/#functions","title":"Functions","text":""},{"location":"extras/sandbox/#sandbox","title":"<code>sandbox</code>","text":"<p>Execute untrusted Streamlit code in a sandboxed environment.</p> <p>This function allows you to execute untrusted Streamlit code inside the user's web browser by using stlite (https://github.com/whitphx/stlite) instead of the App server. This is useful for apps that generate  and execute Streamlit (or Python) code at runtime based on some user instructions. Doing this inside the main Streamlit app would be unsafe since the user could execute arbitrary code on the server.</p> <p>There are a few limitations to this approach: * stlite does not support the full set of Streamlit features. See the stlite documentation   for more details on limitations: https://github.com/whitphx/stlite#limitations * Since the code is executed inside the user's browser, it cannot access any files, session state,   or other functionalities of the server. * The available compute resource depend on the user's machine. So, this is not suited for   heavy computations.</p> <p>Import:</p> <pre><code>from streamlit_extras.sandbox import sandbox # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/sandbox/#src.streamlit_extras.sandbox.sandbox--parameters","title":"Parameters","text":"str or callable <p>The code to execute. This can either be a string containing the code or a function. If a function is passed, the source code will be extracted automatically. The function is required to be fully self-contained and not reference any variables outside of its scope.</p> str or None <p>The version of stlite to use. If None, the latest version will be used.</p> list of str or None <p>A list of Python packages to install before executing the code. If None, the following packages will be installed: pandas, numpy, plotly, altair.</p> int <p>The height of the embedded app in pixels. Defaults to 700.</p> bool <p>Whether to allow scrolling inside the embedded app. Defaults to False.</p> Source code in <code>src/streamlit_extras/sandbox/__init__.py</code> <pre><code>@extra\ndef sandbox(\ncode: str | Callable[[], None],\nstlite_version: str | None = None,\nrequirements: List[str] | None = None,\nheight: int = 700,\nscrolling: bool = False,\n) -&gt; None:\n\"\"\"Execute untrusted Streamlit code in a sandboxed environment.\n    This function allows you to execute untrusted Streamlit code inside the user's web browser\n    by using stlite (https://github.com/whitphx/stlite) instead of the App server. This is useful\n    for apps that generate  and execute Streamlit (or Python) code at runtime based on some user\n    instructions. Doing this inside the main Streamlit app would be unsafe since the user could\n    execute arbitrary code on the server.\n    There are a few limitations to this approach:\n    * stlite does not support the full set of Streamlit features. See the stlite documentation\n      for more details on limitations: https://github.com/whitphx/stlite#limitations\n    * Since the code is executed inside the user's browser, it cannot access any files, session state,\n      or other functionalities of the server.\n    * The available compute resource depend on the user's machine. So, this is not suited for\n      heavy computations.\n    Parameters\n    ----------\n    code : str or callable\n        The code to execute. This can either be a string containing the code or a function.\n        If a function is passed, the source code will be extracted automatically. The function\n        is required to be fully self-contained and not reference any variables outside of its\n        scope.\n    stlite_version : str or None\n        The version of stlite to use. If None, the latest version will be used.\n    requirements : list of str or None\n        A list of Python packages to install before executing the code. If None, the following\n        packages will be installed: pandas, numpy, plotly, altair.\n    height : int\n        The height of the embedded app in pixels. Defaults to 700.\n    scrolling : bool\n        Whether to allow scrolling inside the embedded app. Defaults to False.\n    \"\"\"\nstlite_css_url = \"https://cdn.jsdelivr.net/npm/@stlite/mountable/build/stlite.css\"\nstlite_js_url = \"https://cdn.jsdelivr.net/npm/@stlite/mountable/build/stlite.js\"\nif stlite_version is not None:\nstlite_css_url = f\"https://cdn.jsdelivr.net/npm/@stlite/mountable@{stlite_version}/build/stlite.css\"\nstlite_js_url = f\"https://cdn.jsdelivr.net/npm/@stlite/mountable@{stlite_version}/build/stlite.js\"\nif inspect.isfunction(code):\nfunction_name = code.__name__\ncode = textwrap.dedent(inspect.getsource(code))\ncode += f\"\\n\\n{function_name}()\"\nif not requirements:\nrequirements = [\n\"pandas\",\n\"numpy\",\n\"plotly\",\n\"altair\",\n]\nhtml(\nf\"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    /&gt;\n    &lt;title&gt;Embedded Streamlit App&lt;/title&gt;\n    &lt;link\n      rel=\"stylesheet\"\n      href=\"{stlite_css_url}\"\n    /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script src=\"{stlite_js_url}\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      if (window.location.search !== \"?embed=true{\"&amp;embed_options=disable_scrolling\" if scrolling is False else \"\"}\") {{\n        window.location.search = \"?embed=true{\"&amp;embed_options=disable_scrolling\" if scrolling is False else \"\"}\";\n}}\n      stlite.mount(\n{{\n    requirements: [\"{'\",\"'.join(requirements)}\"], // Packages to install\n    entrypoint: \"streamlit_app.py\",\n    files: {{\n      \"streamlit_app.py\": `\nimport streamlit as st\nst.markdown('&lt;style&gt;[data-baseweb~=\"modal\"]{{visibility: hidden;}}&lt;/style&gt;', unsafe_allow_html=True,)\n{code}\n`,\n}},\n}},\n        document.getElementById(\"root\")\n      );\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n        \"\"\",\nheight=height,\nscrolling=scrolling,\n)\n</code></pre>"},{"location":"extras/st_keyup/","title":"\ud83d\udd11\u00a0\u00a0Keyup text input","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/st_keyup/#summary","title":"Summary","text":"<p>A text input that updates with every key press</p>"},{"location":"extras/st_keyup/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/st_keyup/#examples","title":"Examples","text":""},{"location":"extras/st_keyup/#example_with_debounce","title":"<code>example_with_debounce</code>","text":"<pre><code>def example_with_debounce():\nst.write(\"## Notice how the output doesn't update until 500ms has passed\")\nout = st_keyup(\"Keyup with debounce\", debounce=500)\nst.write(out)\n</code></pre>"},{"location":"extras/stateful_button/","title":"\ud83d\udd1b\u00a0\u00a0Stateful Button","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/stateful_button/#summary","title":"Summary","text":"<p>Button that keeps track of its state, so that it works as a toggle button</p>"},{"location":"extras/stateful_button/#functions","title":"Functions","text":""},{"location":"extras/stateful_button/#button","title":"<code>button</code>","text":"<p>Works just like a normal streamlit button, but it remembers its state, so that it works as a toggle button. If you click it, it will be pressed, and if you click it again, it will be unpressed.</p> <p>kwargs:     Same as st.button except key is required</p> Source code in <code>src/streamlit_extras/stateful_button/__init__.py</code> <pre><code>@extra\ndef button(*args, key=None, **kwargs):\n\"\"\"\n    Works just like a normal streamlit button, but it remembers its state, so that\n    it works as a toggle button. If you click it, it will be pressed, and if you click\n    it again, it will be unpressed.\n    args:\n        Same as st.button\n    kwargs:\n        Same as st.button except key is required\n    \"\"\"\nif key is None:\nraise ValueError(\"Must pass key\")\nif key not in st.session_state:\nst.session_state[key] = False\nif \"type\" not in kwargs:\nkwargs[\"type\"] = \"primary\" if st.session_state[key] else \"secondary\"\nif st.button(*args, **kwargs):\nst.session_state[key] = not st.session_state[key]\nst.experimental_rerun()\nreturn st.session_state[key]\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.stateful_button import button # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stateful_chat/","title":"\ud83d\udcac\u00a0\u00a0Stateful Chat","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/stateful_chat/#summary","title":"Summary","text":"<p>A chat container that automatically keeps track of the chat history.</p>"},{"location":"extras/stateful_chat/#functions","title":"Functions","text":""},{"location":"extras/stateful_chat/#add_message","title":"<code>add_message</code>","text":"<p>Adds a chat message to the chat container.</p> <p>This command can only be used inside the <code>chat</code> container. The message will be displayed in the UI and added to the chat history so that the same message will be automatically displayed on reruns.</p> <p>Import:</p> <pre><code>from streamlit_extras.stateful_chat import add_message # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stateful_chat/#src.streamlit_extras.stateful_chat.add_message--parameters","title":"Parameters","text":"<p>name : \"user\", \"assistant\", or str     The name of the message author. Can be \u201cuser\u201d or \u201cassistant\u201d to         enable preset styling and avatars.</p> <pre><code>Currently, the name is not shown in the UI but is only set as an\naccessibility label. For accessibility reasons, you should not use\nan empty string.\n</code></pre> str, numpy.ndarray, or BytesIO <p>The avatar shown next to the message. Can be anything that is supported by the <code>avatar</code> parameter of <code>st.chat_message</code>.</p> <p>*args : Any     The content of the message. This can be any number of elements that are supported by     <code>st.write</code> as well as generator functions to stream content to the UI.</p> Source code in <code>src/streamlit_extras/stateful_chat/__init__.py</code> <pre><code>@extra\ndef add_message(\nname: Literal[\"user\", \"assistant\"] | str,\n*args: Any,\navatar: str | AtomicImage | None = None,\n):\n\"\"\"Adds a chat message to the chat container.\n    This command can only be used inside the `chat` container. The message\n    will be displayed in the UI and added to the chat history so that the same\n    message will be automatically displayed on reruns.\n    Parameters\n    ----------\n    name : \"user\", \"assistant\", or str\n        The name of the message author. Can be \u201cuser\u201d or \u201cassistant\u201d to\n            enable preset styling and avatars.\n        Currently, the name is not shown in the UI but is only set as an\n        accessibility label. For accessibility reasons, you should not use\n        an empty string.\n    avatar : str, numpy.ndarray, or BytesIO\n        The avatar shown next to the message. Can be anything that is supported by\n        the `avatar` parameter of `st.chat_message`.\n    *args : Any\n        The content of the message. This can be any number of elements that are supported by\n        `st.write` as well as generator functions to stream content to the UI.\n    \"\"\"\nactive_dg = _active_dg()\nif not hasattr(active_dg, \"chat_history\"):\nraise StreamlitAPIException(\n\"The `add_message` command can only be used inside a `chat` container.\"\n)\ndisplayed_elements = _display_message(name, *args, avatar=avatar)\nactive_dg.chat_history.append(\nChatMessage(\nauthor=name,\navatar=avatar,\ncontent=displayed_elements,\n)\n)\n</code></pre>"},{"location":"extras/stateful_chat/#chat","title":"<code>chat</code>","text":"<p>Insert a stateful chat container into your app.</p> <p>This chat container automatically keeps track of the chat history when you use the <code>add_message</code> command to add messages to the chat.</p> <p>Import:</p> <pre><code>from streamlit_extras.stateful_chat import chat # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stateful_chat/#src.streamlit_extras.stateful_chat.chat--parameters","title":"Parameters","text":"str <p>The key that is used to keep track of the chat history in session state. Defaults to \"chat_messages\".</p>"},{"location":"extras/stateful_chat/#src.streamlit_extras.stateful_chat.chat--returns","title":"Returns","text":"<p>Chat Container     The chat container that can be used together with <code>add_message</code> to automatically     keep track of the chat history.</p> Source code in <code>src/streamlit_extras/stateful_chat/__init__.py</code> <pre><code>@extra\ndef chat(key: str = \"chat_messages\") -&gt; \"DeltaGenerator\":\n\"\"\"Insert a stateful chat container into your app.\n    This chat container automatically keeps track of the chat history when you use\n    the `add_message` command to add messages to the chat.\n    Parameters\n    ----------\n    key : str\n        The key that is used to keep track of the chat history in session state. Defaults\n        to \"chat_messages\".\n    Returns\n    -------\n    Chat Container\n        The chat container that can be used together with `add_message` to automatically\n        keep track of the chat history.\n    \"\"\"\nchat_container = st.container()\nif key not in st.session_state:\nst.session_state[key] = []\nchat_history: List[ChatMessage] = st.session_state[key]\nchat_container.chat_history = chat_history  # type: ignore\nwith chat_container:\nfor message in chat_history:\n_display_message(\nmessage[\"author\"], *message[\"content\"], avatar=message[\"avatar\"]\n)\nreturn chat_container\n</code></pre>"},{"location":"extras/stodo/","title":"\u2714\ufe0f\u00a0\u00a0To-do items","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/stodo/#summary","title":"Summary","text":"<p>Simple Python function to create to-do items in Streamlit!</p>"},{"location":"extras/stodo/#functions","title":"Functions","text":""},{"location":"extras/stodo/#to_do","title":"<code>to_do</code>","text":"<p>Create a to_do item</p> <p>Parameters:</p> Name Type Description Default <code>st_commands</code> <code>_type_</code> <p>description</p> required <code>checkbox_id</code> <code>_type_</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>src/streamlit_extras/stodo/__init__.py</code> <pre><code>@extra\ndef to_do(st_commands, checkbox_id):\n\"\"\"Create a to_do item\n    Args:\n        st_commands (_type_): _description_\n        checkbox_id (_type_): _description_\n    Returns:\n        _type_: _description_\n    \"\"\"\ncols = st.columns((1, 20))\ndone = cols[0].checkbox(\" \", key=checkbox_id)\nif done:\nfor (cmd, *args) in st_commands:\nwith cols[1]:\nif cmd == st.write:\ntext = args[0]\ncols[1].write(\n\"&lt;s style='color: rgba(49, 51, 63, 0.4)'&gt;\" f\" {text} &lt;/s&gt;\",\nunsafe_allow_html=True,\n)\nelse:\nif cmd in (\nst.slider,\nst.button,\nst.checkbox,\nst.time_input,\nst.color_picker,\nst.selectbox,\nst.camera_input,\nst.radio,\nst.date_input,\nst.multiselect,\nst.text_area,\nst.text_input,\n):\ncmd(*args, disabled=True)\nelse:\ncmd(*args)\nelse:\nfor (cmd, *args) in st_commands:\nwith cols[1]:\nif cmd == st.write:\nst.write(*args, unsafe_allow_html=True)\nelse:\ncmd(*args)\nst.write(\"\")\nreturn done\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.stodo import to_do # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stoggle/","title":"\u27a1\ufe0f\u00a0\u00a0Toggle button","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/stoggle/#summary","title":"Summary","text":"<p>Toggle button just like in Notion!</p>"},{"location":"extras/stoggle/#functions","title":"Functions","text":""},{"location":"extras/stoggle/#stoggle","title":"<code>stoggle</code>","text":"<p>Displays a toggle widget in Streamlit Args:     summary (str): Summary of the toggle (always shown)     content (str): Content shown after toggling</p> Source code in <code>src/streamlit_extras/stoggle/__init__.py</code> <pre><code>@extra\ndef stoggle(summary: str, content: str):\n\"\"\"\n    Displays a toggle widget in Streamlit\n    Args:\n        summary (str): Summary of the toggle (always shown)\n        content (str): Content shown after toggling\n    \"\"\"\nst.write(\nstr(\ndiv(\nstyle=styles(\nline_height=1.8,\n)\n)(details(smry(summary), p(content)))\n),\nunsafe_allow_html=True,\n)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.stoggle import stoggle # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/streaming_write/","title":"\ud83c\udf0a\u00a0\u00a0Streaming Write","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/streaming_write/#summary","title":"Summary","text":"<p>Drop-in replacement for <code>st.write</code> with streaming support.</p>"},{"location":"extras/streaming_write/#functions","title":"Functions","text":""},{"location":"extras/streaming_write/#write","title":"<code>write</code>","text":"<p>Drop-in replacement for <code>st.write</code> with streaming support.</p> <p>This function is a drop-in replacement for <code>st.write</code> that adds additional capabilities: * Supports streaming data via generator functions. * Executes callable objects (e.g. functions) and writes the return value.</p> Source code in <code>src/streamlit_extras/streaming_write/__init__.py</code> <pre><code>@extra\ndef write(*args: Any, unsafe_allow_html: bool = False, **kwargs) -&gt; List[Any]:\n\"\"\"Drop-in replacement for `st.write` with streaming support.\n    This function is a drop-in replacement for `st.write` that adds additional capabilities:\n    * Supports streaming data via generator functions.\n    * Executes callable objects (e.g. functions) and writes the return value.\n    \"\"\"\nif not args:\nreturn []\nwritten_content: List[Any] = []\nstring_buffer: List[str] = []\ndef flush_buffer():\nif string_buffer:\ntext_content = \" \".join(string_buffer)\ntext_container = st.empty()\ntext_container.markdown(text_content)\nwritten_content.append(text_content)\nstring_buffer[:] = []\nfor arg in args:\n# Order matters!\nif isinstance(arg, str):\nstring_buffer.append(arg)\nelif callable(arg) or inspect.isgenerator(arg):\nflush_buffer()\nif inspect.isgeneratorfunction(arg) or inspect.isgenerator(arg):\n# This causes greyed out effect since this element is missing on rerun:\nstream_container = None\nstreamed_response = \"\"\ndef flush_stream_response():\nnonlocal streamed_response\nnonlocal stream_container\nif streamed_response and stream_container:\nstream_container.write(\nstreamed_response,\nunsafe_allow_html=unsafe_allow_html,\n**kwargs,\n)\nwritten_content.append(streamed_response)\nstream_container = None\nstreamed_response = \"\"\ngenerator = arg() if inspect.isgeneratorfunction(arg) else arg\nfor chunk in generator:\nif isinstance(chunk, str):\nfirst_text = False\nif not stream_container:\nstream_container = st.empty()\nfirst_text = True\nstreamed_response += chunk\n# Only add the streaming symbol on the second text chunk\nstream_container.write(\nstreamed_response + (\"\" if first_text else \" \u258c\"),\nunsafe_allow_html=unsafe_allow_html,\n**kwargs,\n)\nelif callable(chunk):\nflush_stream_response()\nchunk()\nwritten_content.append(chunk)\nelse:\nflush_stream_response()\nst.write(chunk, unsafe_allow_html=unsafe_allow_html, **kwargs)\nwritten_content.append(chunk)\nflush_stream_response()\nelse:\nreturn_value = arg()\nwritten_content.append(arg)\nif return_value is not None:\nflush_buffer()\nst.write(\nreturn_value, unsafe_allow_html=unsafe_allow_html, **kwargs\n)\nelse:\nflush_buffer()\nst.write(arg, unsafe_allow_html=unsafe_allow_html, **kwargs)\nwritten_content.append(arg)\nflush_buffer()\nreturn written_content\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.streaming_write import write # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stylable_container/","title":"\ud83c\udfa8\u00a0\u00a0Styleable Container","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/stylable_container/#summary","title":"Summary","text":"<p>A container that allows to style its child elements using CSS.</p>"},{"location":"extras/stylable_container/#functions","title":"Functions","text":""},{"location":"extras/stylable_container/#stylable_container","title":"<code>stylable_container</code>","text":"<p>Insert a container into your app which you can style using CSS.</p> <p>This is useful to style specific elements in your app.</p> <p>Import:</p> <pre><code>from streamlit_extras.stylable_container import stylable_container # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/stylable_container/#src.streamlit_extras.stylable_container.stylable_container--parameters","title":"Parameters","text":"<p>key : str     The key associated with this container. This needs to be unique since all styles will be     applied to the container with this key.</p> str or list of str <p>The CSS styles to apply to the container elements. This can be a single CSS block or a list of CSS blocks.</p>"},{"location":"extras/stylable_container/#src.streamlit_extras.stylable_container.stylable_container--returns","title":"Returns","text":"<p>DeltaGenerator     A container object. Elements can be added to this container using either the 'with'     notation or by calling methods directly on the returned object.</p> Source code in <code>src/streamlit_extras/stylable_container/__init__.py</code> <pre><code>@extra\ndef stylable_container(key: str, css_styles: str | List[str]) -&gt; \"DeltaGenerator\":\n\"\"\"Insert a container into your app which you can style using CSS.\n    This is useful to style specific elements in your app.\n    Parameters\n    ----------\n    key : str\n        The key associated with this container. This needs to be unique since all styles will be\n        applied to the container with this key.\n    css_styles : str or list of str\n        The CSS styles to apply to the container elements. This can be a single CSS block or a list of\n        CSS blocks.\n    Returns\n    -------\n    DeltaGenerator\n        A container object. Elements can be added to this container using either the 'with'\n        notation or by calling methods directly on the returned object.\n    \"\"\"\nif isinstance(css_styles, str):\ncss_styles = [css_styles]\n# Remove unneeded spacing that is added by the style markdown:\ncss_styles.append(\n\"\"\"\n&gt; div:first-child {\n    margin-bottom: -1rem;\n}\n\"\"\"\n)\nstyle_text = \"\"\"\n&lt;style&gt;\n\"\"\"\nfor style in css_styles:\nstyle_text += f\"\"\"\ndiv[data-testid=\"stVerticalBlock\"]:has(&gt; div.element-container &gt; div.stMarkdown &gt; div[data-testid=\"stMarkdownContainer\"] &gt; p &gt; span.{key}) {style}\n\"\"\"\nstyle_text += f\"\"\"\n    &lt;/style&gt;\n&lt;span class=\"{key}\"&gt;&lt;/span&gt;\n\"\"\"\ncontainer = st.container()\ncontainer.markdown(style_text, unsafe_allow_html=True)\nreturn container\n</code></pre>"},{"location":"extras/switch_page_button/","title":"\ud83d\uddb1\ufe0f\u00a0\u00a0Switch page function","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/switch_page_button/#summary","title":"Summary","text":"<p>Function to switch page programmatically in a MPA</p>"},{"location":"extras/switch_page_button/#functions","title":"Functions","text":""},{"location":"extras/switch_page_button/#switch_page","title":"<code>switch_page</code>","text":"Source code in <code>src/streamlit_extras/switch_page_button/__init__.py</code> <pre><code>@extra\ndef switch_page(page_name: str):\nfrom streamlit.runtime.scriptrunner import RerunData, RerunException\nfrom streamlit.source_util import get_pages\ndef standardize_name(name: str) -&gt; str:\nreturn name.lower().replace(\"_\", \" \")\npage_name = standardize_name(page_name)\npages = get_pages(\"streamlit_app.py\")  # OR whatever your main page is called\nfor page_hash, config in pages.items():\nif standardize_name(config[\"page_name\"]) == page_name:\nraise RerunException(\nRerunData(\npage_script_hash=page_hash,\npage_name=page_name,\n)\n)\npage_names = [standardize_name(config[\"page_name\"]) for config in pages.values()]\nraise ValueError(f\"Could not find page {page_name}. Must be one of {page_names}\")\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.switch_page_button import switch_page # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/tags/","title":"\ud83d\udd16\u00a0\u00a0Tags","text":"<p>Submitted by Maggie Liu</p>"},{"location":"extras/tags/#summary","title":"Summary","text":"<p>Display tags like github issues!</p>"},{"location":"extras/tags/#functions","title":"Functions","text":""},{"location":"extras/tags/#tagger_component","title":"<code>tagger_component</code>","text":"<p>Displays tags next to your text. Args:     content (str): Content to be tagged     tags (list): A list of tags to be displayed next to the content     color_name: A list or a string that indicates the color of tags.     Choose from lightblue, orange, bluegreen, blue, violet, red, green, yellow</p> Source code in <code>src/streamlit_extras/tags/__init__.py</code> <pre><code>@extra\ndef tagger_component(\ncontent: str,\ntags: list[str],\ncolor_name: list[VALID_COLOR_NAMES] | VALID_COLOR_NAMES | None = None,\n):\n\"\"\"\n    Displays tags next to your text.\n    Args:\n        content (str): Content to be tagged\n        tags (list): A list of tags to be displayed next to the content\n        color_name: A list or a string that indicates the color of tags.\n        Choose from lightblue, orange, bluegreen, blue, violet, red, green, yellow\n    \"\"\"\nif isinstance(color_name, str):\nif color_name not in TAGGER_COLOR_PALETTE:\nraise ValueError(\nf\"color_name must contain a name from {TAGGER_COLOR_PALETTE.keys()} \"\nf\"not {color_name}\"\n)\nelif isinstance(color_name, list):\nfor color in color_name:\nif color not in TAGGER_COLOR_PALETTE:\nraise ValueError(\nf\"color_name must contain a name from {TAGGER_COLOR_PALETTE.keys()}\"\nf\" not {color}\"\n)\nif len(color_name) != len(tags):\nraise ValueError(\nf\"color_name must be the same length as tags. \"\nf\"len(color_name) = {len(color_name)}, len(tags) = {len(tags)}\"\n)\ntags_html = _get_html(content, tags, color_name)\nst.write(tags_html, unsafe_allow_html=True)\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.tags import tagger_component # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"},{"location":"extras/toggle_switch/","title":"\ud83d\udd1b\u00a0\u00a0Toggle Switch","text":"<p>Submitted by Carlos D. Serrano</p>"},{"location":"extras/toggle_switch/#summary","title":"Summary","text":"<p>On/Off Toggle Switch with color customizations</p>"},{"location":"extras/toggle_switch/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/vertical_slider/","title":"\ud83c\udf9a\u00a0\u00a0Vertical Slider","text":"<p>Submitted by Carlos D. Serrano</p>"},{"location":"extras/vertical_slider/#summary","title":"Summary","text":"<p>Continuous Vertical Slider with color customizations</p>"},{"location":"extras/vertical_slider/#docstring","title":"Docstring","text":"<p>Visit the PyPI page for more information.</p>"},{"location":"extras/word_importances/","title":"\u2757\u00a0\u00a0Word importances","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/word_importances/#summary","title":"Summary","text":"<p>Highlight words based on their importances. Inspired from captum library.</p>"},{"location":"extras/word_importances/#functions","title":"Functions","text":""},{"location":"extras/word_importances/#format_word_importances","title":"<code>format_word_importances</code>","text":"<p>Adds a background color to each word based on its importance (float from -1 to 1)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; format_word_importances(words=[\"Hello\", \"world\"], importances=[0.1, 0.2])\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>words</code> <code>list</code> <p>List of words</p> required <code>importances</code> <code>list</code> <p>List of importances (scores from -1 to 1)</p> required <p>Returns:</p> Name Type Description <code>html</code> <code>str</code> <p>HTML string with formatted word</p> Source code in <code>src/streamlit_extras/word_importances/__init__.py</code> <pre><code>@extra\ndef format_word_importances(words: List[str], importances: List[float]) -&gt; str:\n\"\"\"Adds a background color to each word based on its importance (float from -1 to 1)\n    Examples:\n        &gt;&gt;&gt; format_word_importances(words=[\"Hello\", \"world\"], importances=[0.1, 0.2])\n    Args:\n        words (list): List of words\n        importances (list): List of importances (scores from -1 to 1)\n    Returns:\n        html: HTML string with formatted word\n    \"\"\"\nif importances is None or len(importances) == 0:\nreturn \"&lt;td&gt;&lt;/td&gt;\"\nassert len(words) == len(importances), \"Words and importances but be of same length\"\ntags = [\"&lt;td&gt;\"]\nfor word, importance in zip(words, importances[: len(words)]):\ncolor = _get_color(importance)\nunwrapped_tag = (\n'&lt;mark style=\"background-color: {color}; opacity:1.0;             '\n'        line-height:1.75\"&gt;&lt;font color=\"black\"&gt; {word}            '\n\"        &lt;/font&gt;&lt;/mark&gt;\".format(color=color, word=word)\n)\ntags.append(unwrapped_tag)\ntags.append(\"&lt;/td&gt;\")\nhtml = \"\".join(tags)\nreturn html\n</code></pre> <p>Import:</p> <pre><code>from streamlit_extras.word_importances import format_word_importances # (1)!\n</code></pre> <ol> <li>You should add this to the top of your .py file </li> </ol>"}]}