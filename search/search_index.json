{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A Python library with useful Streamlit extras","text":"<p>Welcome to the \ud83e\udea2 streamlit-extras documentation! If you want to give a special touch to your Streamlit apps, you're at the right place!</p> <p>Go ahead and browse available extras in the left handside menu, and if you like them, remember, you're just a pip install away from using them:</p> <pre><code>pip install streamlit-extras\n</code></pre> <p>Learn more about the library on GitHub!</p>"},{"location":"components/","title":"Streamlit Components","text":"<p>streamlit-extras is a Streamlit Component. Visit the components gallery to discover even more components, and learn how to build your own.</p>"},{"location":"credits/","title":"Credits","text":"<p>This library is mainly maintained by Arnaud Miribel and Zachary Blackwood.</p>"},{"location":"extras/add_vertical_space/","title":"\ud83d\udc7d Add Vertical Space","text":"<p>Submitted by Tyler Richards</p>"},{"location":"extras/add_vertical_space/#summary","title":"Summary","text":"<p>Add n lines of vertical space to your Streamlit app in one command</p>"},{"location":"extras/add_vertical_space/#docstring","title":"Docstring","text":""},{"location":"extras/add_vertical_space/#src.streamlit_extras.add_vertical_space.add_vertical_space","title":"<code>add_vertical_space(num_lines=1)</code>","text":"<p>Add vertical space to your Streamlit app.</p> <p>Parameters:</p> Name Type Description Default <code>num_lines</code> <code>int</code> <p>Height of the vertical space (given in number of lines). Defaults to 1.</p> <code>1</code> Source code in <code>src/streamlit_extras/add_vertical_space/__init__.py</code> <pre><code>@extra\ndef add_vertical_space(num_lines: int = 1) -&gt; None:\n\"\"\"Add vertical space to your Streamlit app.\n\n    Args:\n        num_lines (int, optional): Height of the vertical space (given in number of lines). Defaults to 1.\n    \"\"\"\n    for _ in range(num_lines):\n        st.write(\"\")\n</code></pre>"},{"location":"extras/altex/","title":"\ud83d\udc78 Altex","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/altex/#summary","title":"Summary","text":"<p>A simple wrapper on top of Altair to make Streamlit charts in an express API. If you're lazy and/or familiar with Altair, this is  probably a good fit! Inspired by plost and plotly-express.</p>"},{"location":"extras/altex/#docstring","title":"Docstring","text":""},{"location":"extras/altex/#src.streamlit_extras.altex.chart","title":"<code>chart(use_container_width=True, **kwargs)</code>","text":"<p>Display an Altair chart in Streamlit</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>See function _chart()</p> <code>{}</code> <code>use_container_width</code> <code>bool</code> <p>Whether or not the displayed chart uses all available width. Defaults to True.</p> <code>True</code> Source code in <code>src/streamlit_extras/altex/__init__.py</code> <pre><code>def chart(use_container_width: bool = True, **kwargs):\n\"\"\"Display an Altair chart in Streamlit\n\n    Args:\n        **kwargs: See function _chart()\n        use_container_width (bool, optional): Whether or not the displayed chart uses all available width. Defaults to True.\n    \"\"\"\n\n    if \"width\" in kwargs:\n        use_container_width = False\n\n    st.altair_chart(\n        _chart(**kwargs),\n        use_container_width=use_container_width,\n    )\n</code></pre>"},{"location":"extras/annotated_text/","title":"\ud83d\udd8a\ufe0f Annotated Text","text":"<p>Submitted by tvst</p>"},{"location":"extras/annotated_text/#summary","title":"Summary","text":"<p>A simple way to display annotated text in Streamlit apps</p>"},{"location":"extras/annotated_text/#docstring","title":"Docstring","text":""},{"location":"extras/app_logo/","title":"\ud83d\udc31 App Logo","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/app_logo/#summary","title":"Summary","text":"<p>Add a logo on top of the navigation bar of a multipage app</p>"},{"location":"extras/app_logo/#docstring","title":"Docstring","text":""},{"location":"extras/app_logo/#src.streamlit_extras.app_logo.add_logo","title":"<code>add_logo(logo_url, height=120)</code>","text":"<p>Add a logo (from logo_url) on the top of the navigation page of a multipage app. Taken from https://discuss.streamlit.io/t/put-logo-and-title-above-on-top-of-page-navigation-in-sidebar-of-multipage-app/28213/6</p> <p>The url can either be a url to the image, or a local path to the image.</p> <p>Parameters:</p> Name Type Description Default <code>logo_url</code> <code>str</code> <p>URL/local path of the logo</p> required Source code in <code>src/streamlit_extras/app_logo/__init__.py</code> <pre><code>@extra\ndef add_logo(logo_url: str, height: int = 120):\n\"\"\"Add a logo (from logo_url) on the top of the navigation page of a multipage app.\n    Taken from https://discuss.streamlit.io/t/put-logo-and-title-above-on-top-of-page-navigation-in-sidebar-of-multipage-app/28213/6\n\n    The url can either be a url to the image, or a local path to the image.\n\n    Args:\n        logo_url (str): URL/local path of the logo\n    \"\"\"\n\n    if validators.url(logo_url) is True:\n        logo = f\"url({logo_url})\"\n    else:\n        logo = f\"url(data:image/png;base64,{base64.b64encode(Path(logo_url).read_bytes()).decode()})\"\n\n    st.markdown(\n        f\"\"\"\n        &lt;style&gt;\n            [data-testid=\"stSidebarNav\"] {{\n                background-image: {logo};\n                background-repeat: no-repeat;\n                padding-top: {height - 40}px;\n                background-position: 20px 20px;\n}}\n        &lt;/style&gt;\n        \"\"\",\n        unsafe_allow_html=True,\n    )\n</code></pre>"},{"location":"extras/badges/","title":"\ud83c\udff7\ufe0f Badges","text":"<p>Submitted by Arnaud Miribel, ShruAgarwal</p>"},{"location":"extras/badges/#summary","title":"Summary","text":"<p>Create custom badges (e.g. PyPI, Streamlit Cloud, GitHub, Twitter, Buy Me a Coffee)</p>"},{"location":"extras/badges/#docstring","title":"Docstring","text":""},{"location":"extras/badges/#src.streamlit_extras.badges.badge","title":"<code>badge(type, name=None, url=None)</code>","text":"<p>Easily create a badge!</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>Badge type. Can be \"pypi\", \"github\", \"streamlit\", \"twitter\" or \"buymeacoffee\"</p> required <code>name</code> <code>str</code> <p>Name of the PyPI package, GitHub repository, Twitter's username or BuyMeaCoffee Creator's page name.         Mandatory when using type=\"pypi\", type=\"twitter\" &amp; type=\"buymeacoffee\"</p> <code>None</code> <code>url</code> <code>str</code> <p>URL of the Streamlit Cloud app. Mandatory when using type=\"streamlit\"</p> <code>None</code> Source code in <code>src/streamlit_extras/badges/__init__.py</code> <pre><code>@extra\ndef badge(type: _SUPPORTED_TYPES, name: str | None = None, url: str | None = None):\n\"\"\"Easily create a badge!\n\n    Args:\n        type (str): Badge type. Can be \"pypi\", \"github\", \"streamlit\", \"twitter\" or \"buymeacoffee\"\n        name (str): Name of the PyPI package, GitHub repository, Twitter's username or BuyMeaCoffee Creator's page name.\n                    Mandatory when using type=\"pypi\", type=\"twitter\" &amp; type=\"buymeacoffee\"\n        url (str): URL of the Streamlit Cloud app. Mandatory when using type=\"streamlit\"\n    \"\"\"\n\n    assert type, \"Type must be given!\"\n\n    assert type in get_args(_SUPPORTED_TYPES), (\n        f\"Input type '{type}' is not supported! Supported types are\"\n        f\" {get_args(_SUPPORTED_TYPES)}\"\n    )\n\n    badge_html = None\n\n    if type == \"pypi\":\n        assert name, \"You must give a valid PyPI package name!\"\n        badge_html = str(\n            a(href=f\"https://pypi.org/project/{name}\")(\n                img(src=f\"https://badge.fury.io/py/{name}.svg\")\n            )\n        )\n\n    if type == \"streamlit\":\n        assert url, \"You must provide a valid URL for the Streamlit app\"\n        badge_html = str(\n            a(href=url)(\n                img(\n                    src=\"https://static.streamlit.io/badges/streamlit_badge_black_white.svg\"\n                )\n            )\n        )\n\n    if type == \"github\":\n        assert name, (\n            \"You must give a valid GitHub repository name! Something like\"\n            \" 'author/name'\"\n        )\n        badge_html = str(\n            a(href=f\"https://github.com/{name}\")(\n                img(\n                    src=f\"https://img.shields.io/github/stars/{name}.svg?style=social&amp;label=Star&amp;maxAge=2592000\"\n                )\n            )\n        )\n\n    if type == \"twitter\":\n        assert name, \"You must provide a valid twitter username\"\n        badge_html = str(\n            a(href=f\"https://twitter.com/intent/follow?screen_name={name}\")(\n                img(\n                    src=f\"https://img.shields.io/twitter/follow/{name}?style=social&amp;logo=twitter\"\n                )\n            )\n        )\n\n    if type == \"buymeacoffee\":\n        assert name, \"You must provide a valid Buy-Me-a-Coffee page username\"\n        badge_html = str(\n            a(href=f\"https://www.buymeacoffee.com/{name}\")(\n                img(\n                    src=\"https://img.shields.io/badge/Buy%20me%20a%20coffee--yellow.svg?logo=buy-me-a-coffee&amp;logoColor=orange&amp;style=social\"\n                )\n            )\n        )\n\n    if badge_html is not None:\n        st.write(badge_html, unsafe_allow_html=True)\n</code></pre>"},{"location":"extras/buy_me_a_coffee/","title":"\u2615 Buy Me A Coffee","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/buy_me_a_coffee/#summary","title":"Summary","text":"<p>Adds a floating button which links to your Buy Me a Coffee page</p>"},{"location":"extras/buy_me_a_coffee/#docstring","title":"Docstring","text":""},{"location":"extras/camera_input_live/","title":"\ud83d\udcf8 Camera Input Live","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/camera_input_live/#summary","title":"Summary","text":"<p>A camera input that updates a variable number of seconds</p>"},{"location":"extras/camera_input_live/#docstring","title":"Docstring","text":""},{"location":"extras/capture/","title":"\ud83e\udd45 Capture","text":"<p>Submitted by Alexander Martin</p>"},{"location":"extras/capture/#summary","title":"Summary","text":"<p>Capture utility extensions for the standard streamlit library</p>"},{"location":"extras/capture/#docstring","title":"Docstring","text":""},{"location":"extras/capture/#src.streamlit_extras.capture.StreamlitLoggingHandler","title":"<code>StreamlitLoggingHandler</code>","text":"<p>             Bases: <code>StreamHandler</code></p> <p>Extension of Stream Handler that passes the value of the stream IO buffer to a callback function on every log.</p> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>class StreamlitLoggingHandler(logging.StreamHandler):\n\"\"\"Extension of Stream Handler that passes the value of the stream IO buffer to a callback function on every log.\"\"\"\n\n    def set_callback(self, func: Callable):\n\"\"\"Set the callback to be used on this record.\"\"\"\n        # pylint: disable=attribute-defined-outside-init\n        self.callback = func\n\n    def emit(self, record: logging.LogRecord):\n\"\"\"Emit a record but also call a function on the full buffer.\"\"\"\n        super().emit(record)\n        self.callback(self.stream.getvalue())\n</code></pre>"},{"location":"extras/capture/#src.streamlit_extras.capture.StreamlitLoggingHandler.emit","title":"<code>emit(record)</code>","text":"<p>Emit a record but also call a function on the full buffer.</p> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>def emit(self, record: logging.LogRecord):\n\"\"\"Emit a record but also call a function on the full buffer.\"\"\"\n    super().emit(record)\n    self.callback(self.stream.getvalue())\n</code></pre>"},{"location":"extras/capture/#src.streamlit_extras.capture.StreamlitLoggingHandler.set_callback","title":"<code>set_callback(func)</code>","text":"<p>Set the callback to be used on this record.</p> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>def set_callback(self, func: Callable):\n\"\"\"Set the callback to be used on this record.\"\"\"\n    # pylint: disable=attribute-defined-outside-init\n    self.callback = func\n</code></pre>"},{"location":"extras/capture/#src.streamlit_extras.capture.logcapture","title":"<code>logcapture(dst, terminator='\\n', from_logger=None, formatter=None)</code>","text":"<p>Redirect logging to a streamlit function call <code>dst</code>.</p> <pre><code>Args:\n    dst (callable[str]): A funciton callable with a single string argument. The entire log contents will be\n        passed to this function every time a log is written. It is designed to be compatible with st.empty().*\n        functions as callbacks.\n    terminator (optional, str): If a `terminator` is specified, it is added onto the end of each log.\n        This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n        If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string.\n    from_logger (optional, logging.Logger or loguru.logger): The logger from which logs will be captured.\n        Defaults to `logging.root`.\n    formatter (optional, logging.Formatter): If specified, the specified formatter will be added to the logging\n        handler to control how logs are displayed.\n\nCode Examples:\n\n    with st_logging(st.empty().write):\n        logging.info(\"All logs will be output to an st.empty\")\n\n    with st_logging(st.empty().code, terminator=\"\", to_logger=loguru.logger)\n</code></pre>"},{"location":"extras/capture/#src.streamlit_extras.capture.logcapture--loguruloggerinfothis-will-also-log-if-using-logurus-logger","title":"loguru.logger.info(\"This will also log (if using loguru's logger)\")","text":"Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef logcapture(\n    dst: Callable,\n    terminator: str = \"\\n\",\n    from_logger: logging.Logger | None = None,\n    formatter: logging.Formatter | None = None,\n):\n\"\"\"Redirect logging to a streamlit function call `dst`.\n\n        Args:\n            dst (callable[str]): A funciton callable with a single string argument. The entire log contents will be\n                passed to this function every time a log is written. It is designed to be compatible with st.empty().*\n                functions as callbacks.\n            terminator (optional, str): If a `terminator` is specified, it is added onto the end of each log.\n                This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n                If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string.\n            from_logger (optional, logging.Logger or loguru.logger): The logger from which logs will be captured.\n                Defaults to `logging.root`.\n            formatter (optional, logging.Formatter): If specified, the specified formatter will be added to the logging\n                handler to control how logs are displayed.\n\n        Code Examples:\n\n            with st_logging(st.empty().write):\n                logging.info(\"All logs will be output to an st.empty\")\n\n            with st_logging(st.empty().code, terminator=\"\", to_logger=loguru.logger)\n    #           loguru.logger.info(\"This will also log (if using loguru's logger)\")\n    \"\"\"\n    if not from_logger:\n        from_logger = logging.getLogger()  # root logger\n\n    # Special-case loguru\n    using_loguru = (\n        \"loguru\" in sys.modules and sys.modules[\"loguru\"].logger is from_logger\n    )\n\n    with StringIO() as buffer:\n        new_handler = StreamlitLoggingHandler(buffer)\n        new_handler.set_callback(dst)\n        new_handler.terminator = terminator\n        if formatter:\n            new_handler.setFormatter(formatter)\n        elif using_loguru:\n            pass\n        else:\n            new_handler.setFormatter(\n                logging.Formatter(\n                    \"%(asctime)s - %(levelname)s %(message)s\",\n                    datefmt=\"%m/%d/%Y %I:%M:%S %p\",\n                )\n            )\n        handler_id = None\n        if using_loguru:\n            handler_id = from_logger.add(new_handler)  # type: ignore\n        else:\n            from_logger.addHandler(new_handler)\n        try:\n            yield\n        finally:\n            if using_loguru:\n                from_logger.remove(handler_id)  # type: ignore\n            else:\n                from_logger.removeHandler(new_handler)\n</code></pre>"},{"location":"extras/capture/#src.streamlit_extras.capture.redirect","title":"<code>redirect(src, dst, terminator='\\n')</code>","text":"<p>Redirect STDOUT and STDERR to streamlit functions.</p> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef redirect(src: TextIO, dst: Callable, terminator: str = \"\\n\"):\n\"\"\"Redirect STDOUT and STDERR to streamlit functions.\"\"\"\n    with StringIO() as buffer:\n\n        def new_write(b):\n            buffer.write(b + terminator)\n            dst(buffer.getvalue())\n\n        # Test if we are actually running in the streamlit script thread before we redirect\n        if get_script_run_ctx() is not None:\n            old_write = src.write\n            try:\n                src.write = new_write  # type: ignore\n                yield\n            finally:\n                src.write = old_write  # type: ignore\n        else:\n            yield\n</code></pre>"},{"location":"extras/capture/#src.streamlit_extras.capture.stderr","title":"<code>stderr(dst, terminator='\\n')</code>","text":"<p>Capture STDERR and redirect it to a callable <code>dst</code>.</p> <p>Parameters:</p> Name Type Description Default <code>dst</code> <code>callable[str]</code> <p>A funciton callable with a single string argument. The entire captured contents will be passed to this function every time a new string is written. It is designed to be compatible with st.empty().* functions as callbacks.</p> required <code>terminator</code> <code>(optional, str)</code> <p>If a <code>terminator</code> is specified, it is added onto each call to stdout.write/print. This defaults to a newline which causes them to display on separate lines within an st.empty.write <code>dst. If using this with st.empty.code as</code>dst<code>it is recommended to set</code>terminator` to empty string.</p> <code>'\\n'</code> <p>Code Example:</p> <pre><code>with st_stderr(st.empty().code, terminator=\"\"):\n    print(\"this will print as if st.code() was called\")\n</code></pre> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef stderr(dst: Callable, terminator=\"\\n\"):\n\"\"\"Capture STDERR and redirect it to a callable `dst`.\n\n    Args:\n        dst (callable[str]): A funciton callable with a single string argument. The entire captured contents will be\n            passed to this function every time a new string is written. It is designed to be compatible with\n            st.empty().* functions as callbacks.\n        terminator (optional, str): If a `terminator` is specified, it is added onto each call to stdout.write/print.\n            This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n            If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string.\n\n    Code Example:\n\n        with st_stderr(st.empty().code, terminator=\"\"):\n            print(\"this will print as if st.code() was called\")\n    \"\"\"\n    with redirect(sys.stderr, dst, terminator):\n        yield\n</code></pre>"},{"location":"extras/capture/#src.streamlit_extras.capture.stdout","title":"<code>stdout(dst, terminator='\\n')</code>","text":"<p>Capture STDOUT and redirect it to a callable <code>dst</code>.</p> <p>Parameters:</p> Name Type Description Default <code>dst</code> <code>callable[str]</code> <p>A funciton callable with a single string argument. The entire captured contents will be passed to this function every time a new string is written. It is designed to be compatible with st.empty().* functions as callbacks.</p> required <code>terminator</code> <code>(optional, str)</code> <p>If a <code>terminator</code> is specified, it is added onto each call to stdout.write/print. This defaults to a newline which causes them to display on separate lines within an st.empty.write <code>dst. If using this with st.empty.code as</code>dst<code>it is recommended to set</code>terminator` to empty string.</p> <code>'\\n'</code> <p>Code Example:</p> <pre><code>with st_stdout(st.empty().write):\n    print(\"this will print as if st.write() was called\")\n</code></pre> Source code in <code>src/streamlit_extras/capture/__init__.py</code> <pre><code>@extra\n@contextmanager\ndef stdout(dst: Callable, terminator=\"\\n\"):\n\"\"\"Capture STDOUT and redirect it to a callable `dst`.\n\n    Args:\n        dst (callable[str]): A funciton callable with a single string argument. The entire captured contents will be\n            passed to this function every time a new string is written. It is designed to be compatible with\n            st.empty().* functions as callbacks.\n        terminator (optional, str): If a `terminator` is specified, it is added onto each call to stdout.write/print.\n            This defaults to a newline which causes them to display on separate lines within an st.empty.write `dst.\n            If using this with st.empty.code as `dst` it is recommended to set `terminator` to empty string.\n\n    Code Example:\n\n        with st_stdout(st.empty().write):\n            print(\"this will print as if st.write() was called\")\n    \"\"\"\n    with redirect(sys.stdout, dst, terminator):\n        yield\n</code></pre>"},{"location":"extras/card/","title":"\ud83d\udcb3\ufe0f Card","text":"<p>Submitted by Gamliel Cohen"},{"location":"extras/card/#summary","title":"Summary","text":"<p>Streamlit Component, for a UI card</p>"},{"location":"extras/card/#docstring","title":"Docstring","text":""},{"location":"extras/chart_annotations/","title":"\u2b07 Chart Annotations","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/chart_annotations/#summary","title":"Summary","text":"<p>Add annotations to specific timestamps in your time series in Altair!</p>"},{"location":"extras/chart_annotations/#docstring","title":"Docstring","text":""},{"location":"extras/chart_annotations/#src.streamlit_extras.chart_annotations.get_annotations_chart","title":"<code>get_annotations_chart(annotations, y=0, min_date=None, max_date=None, marker='\u2b07', marker_size=20, marker_offset_x=0, market_offset_y=-10, marker_align='center')</code>","text":"<p>Creates an Altair Chart with annotation markers on the horizontal axis. Useful to highlight certain events on top of another time series Altair Chart. More here https://share.streamlit.io/streamlit/example-app-time-series-annotation/main</p> <p>Parameters:</p> Name Type Description Default <code>annotations</code> <code>Iterable[Tuple]</code> <p>Iterable of annotations defined by tuples with date and annotation.</p> required <code>y</code> <code>float</code> <p>Height at which the annotation marker should be. Defaults to 0.</p> <code>0</code> <code>min_date</code> <code>str</code> <p>Only annotations older than min_date will be displayed. Defaults to None.</p> <code>None</code> <code>max_date</code> <code>str</code> <p>Only annotations more recent than max_date will be displayed. Defaults to None.</p> <code>None</code> <code>marker</code> <code>str</code> <p>Marker to be used to indicate there is an annotation. Defaults to \"\u2b07\".</p> <code>'\u2b07'</code> <code>marker_size</code> <code>float</code> <p>Size of the marker (font size). Defaults to 20.</p> <code>20</code> <code>marker_offset_x</code> <code>float</code> <p>Horizontal offset. Defaults to 0.</p> <code>0</code> <code>market_offset_y</code> <code>float</code> <p>Vertical offset. Defaults to -10.</p> <code>-10</code> <code>marker_align</code> <code>str</code> <p>Text-align property of the marker (\"left\", \"right\", \"center\"). Defaults to \"center\".</p> <code>'center'</code> <p>Returns:</p> Type Description <code>Chart</code> <p>alt.Chart: Altair Chart with annotation markers on the horizontal axis</p> Source code in <code>src/streamlit_extras/chart_annotations/__init__.py</code> <pre><code>@extra\ndef get_annotations_chart(\n    annotations: Iterable[Tuple],\n    y: float = 0,\n    min_date: str | None = None,\n    max_date: str | None = None,\n    marker: str = \"\u2b07\",\n    marker_size: float = 20,\n    marker_offset_x: float = 0,\n    market_offset_y: float = -10,\n    marker_align: str = \"center\",\n) -&gt; alt.Chart:\n\"\"\"\n    Creates an Altair Chart with annotation markers on the horizontal axis.\n    Useful to highlight certain events on top of another time series Altair Chart.\n    More here https://share.streamlit.io/streamlit/example-app-time-series-annotation/main\n\n    Args:\n        annotations (Iterable[Tuple]): Iterable of annotations defined by tuples with date and annotation.\n        y (float, optional): Height at which the annotation marker should be. Defaults to 0.\n        min_date (str, optional): Only annotations older than min_date will be displayed. Defaults to None.\n        max_date (str, optional): Only annotations more recent than max_date will be displayed. Defaults to None.\n        marker (str, optional): Marker to be used to indicate there is an annotation. Defaults to \"\u2b07\".\n        marker_size (float, optional): Size of the marker (font size). Defaults to 20.\n        marker_offset_x (float, optional): Horizontal offset. Defaults to 0.\n        market_offset_y (float, optional): Vertical offset. Defaults to -10.\n        marker_align (str, optional): Text-align property of the marker (\"left\", \"right\", \"center\"). Defaults to \"center\".\n\n    Returns:\n        alt.Chart: Altair Chart with annotation markers on the horizontal axis\n    \"\"\"\n\n    # Make a DataFrame for annotations\n    annotations_df = pd.DataFrame(\n        annotations,\n        columns=[\"date\", \"annotation\"],\n    )\n\n    annotations_df.date = pd.to_datetime(annotations_df.date)\n    annotations_df[\"y\"] = y\n    if min_date:\n        annotations_df = annotations_df[annotations_df.date.gt(min_date)]\n    if max_date:\n        annotations_df = annotations_df[annotations_df.date.lt(max_date)]\n\n    encode_params = {\"x\": \"date:T\", \"y\": alt.Y(\"y:Q\"), \"tooltip\": \"annotation\"}\n\n    if \"url\" in annotations_df.columns:\n        encode_params[\"href\"] = \"url\"\n\n    annotations_chart = (\n        alt.Chart(annotations_df)\n        .mark_text(\n            size=marker_size,\n            text=marker,\n            dy=market_offset_y,\n            dx=marker_offset_x,\n            align=marker_align,\n            color=\"black\",\n        )\n        .encode(**encode_params)\n    )\n\n    return annotations_chart\n</code></pre>"},{"location":"extras/chart_container/","title":"\ud83d\uddbc\ufe0f Chart Container","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/chart_container/#summary","title":"Summary","text":"<p>Embed your chart in a nice tabs container to let viewers explore and export its underlying data.</p>"},{"location":"extras/chart_container/#docstring","title":"Docstring","text":""},{"location":"extras/chart_container/#src.streamlit_extras.chart_container.chart_container","title":"<code>chart_container(data, tabs=('Chart \ud83d\udcc8', 'Dataframe \ud83d\udcc4', 'Export \ud83d\udcc1'), export_formats=_SUPPORTED_EXPORT_KEYS)</code>","text":"<p>Embed chart in a (chart, data, export, explore) tabs container to let the viewer explore and export its underlying data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dataframe used in the dataframe tab.</p> required <code>tabs</code> <code>Sequence</code> <p>Tab labels. Defaults to (\"Chart \ud83d\udcc8\", \"Dataframe \ud83d\udcc4\", \"Export \ud83d\udcc1\").</p> <code>('Chart \ud83d\udcc8', 'Dataframe \ud83d\udcc4', 'Export \ud83d\udcc1')</code> <code>export_formats</code> <code>Sequence</code> <p>Export file formats. Defaults to (\"CSV\", \"Parquet\")</p> <code>_SUPPORTED_EXPORT_KEYS</code> Source code in <code>src/streamlit_extras/chart_container/__init__.py</code> <pre><code>@extra  # type: ignore\n@contextmanager\ndef chart_container(\n    data: pd.DataFrame,\n    tabs: Sequence[str] = (\n        \"Chart \ud83d\udcc8\",\n        \"Dataframe \ud83d\udcc4\",\n        \"Export \ud83d\udcc1\",\n    ),\n    export_formats: Sequence[str] = _SUPPORTED_EXPORT_KEYS,\n) -&gt; Generator:\n\"\"\"Embed chart in a (chart, data, export, explore) tabs container to let the viewer explore and export its underlying data.\n\n    Args:\n        data (pd.DataFrame): Dataframe used in the dataframe tab.\n        tabs (Sequence, optional): Tab labels. Defaults to (\"Chart \ud83d\udcc8\", \"Dataframe \ud83d\udcc4\", \"Export \ud83d\udcc1\").\n        export_formats (Sequence, optional): Export file formats. Defaults to (\"CSV\", \"Parquet\")\n    \"\"\"\n\n    assert all(\n        export_format in _SUPPORTED_EXPORTS for export_format in export_formats\n    ), f\"Input format is not supported, please use one within {_SUPPORTED_EXPORTS.keys()}\"\n\n    if \"chart_container_widget_key\" not in st.session_state:\n        st.session_state[\"chart_container_widget_key\"] = 0\n\n    def _get_random_widget_key() -&gt; str:\n        st.session_state.chart_container_widget_key += 1\n        return st.session_state.chart_container_widget_key\n\n    tab_1, tab_2, tab_3 = st.tabs(tabs)\n\n    with tab_1:\n        yield\n\n    with tab_2:\n        st.dataframe(data, use_container_width=True)\n\n    with tab_3:\n        st.caption(\"Export limited to 1 million rows.\")\n        export_data = data.head(1_000_000)\n        for chosen_export_format in export_formats:\n            export_utils = _SUPPORTED_EXPORTS[chosen_export_format]\n            exporter = export_utils[\"function\"]\n            extension = export_utils[\"extension\"]\n            st.download_button(\n                f\"Download data as {extension}\",\n                data=exporter(export_data),\n                file_name=\"data\" + extension,\n                mime=export_utils.get(\"mime\"),\n                key=_get_random_widget_key(),\n            )\n</code></pre>"},{"location":"extras/colored_header/","title":"\ud83d\udd8c\ufe0f Colored Header","text":"<p>Submitted by Johannes Rieke / Tyler Richards</p>"},{"location":"extras/colored_header/#summary","title":"Summary","text":"<p>This function makes headers much prettier in Streamlit</p>"},{"location":"extras/colored_header/#docstring","title":"Docstring","text":"<p>Add colorful headers to your Streamlit app.</p>"},{"location":"extras/colored_header/#src.streamlit_extras.colored_header.color","title":"<code>color(name)</code>","text":"<p>Returns a color from the streamlit color palette, e.g. red-100, as hex.</p> Source code in <code>src/streamlit_extras/colored_header/__init__.py</code> <pre><code>def color(name):\n\"\"\"Returns a color from the streamlit color palette, e.g. red-100, as hex.\"\"\"\n    try:\n        hue, intensity = name.rsplit(\"-\", 1)\n    except (ValueError, KeyError):\n        st.error(\n            \"Input color_name must contain a name (red, orange, ...) and\"\n            \" intensity (10, 20, ... 100) e.g. 'red-70'\"\n        )\n        st.stop()\n    return ST_COLOR_PALETTE[hue][intensity]\n</code></pre>"},{"location":"extras/colored_header/#src.streamlit_extras.colored_header.colored_header","title":"<code>colored_header(label='Nice title', description='Cool description', color_name='red-70')</code>","text":"<p>Shows a header with a colored underline and an optional description.</p> Source code in <code>src/streamlit_extras/colored_header/__init__.py</code> <pre><code>@extra\ndef colored_header(\n    label: str = \"Nice title\",\n    description: str = \"Cool description\",\n    color_name: _SUPPORTED_COLORS = \"red-70\",\n):\n\"\"\"\n    Shows a header with a colored underline and an optional description.\n    \"\"\"\n    if color_name is None:\n        color_name = next(HEADER_COLOR_CYCLE)\n    st.subheader(label)\n    st.write(\n        f'&lt;hr style=\"background-color: {color(color_name)}; margin-top: 0;'\n        ' margin-bottom: 0; height: 3px; border: none; border-radius: 3px;\"&gt;',\n        unsafe_allow_html=True,\n    )\n    if description:\n        st.caption(description)\n</code></pre>"},{"location":"extras/customize_running/","title":"\ud83c\udfc3\u200d\u2642\ufe0f Customize Running","text":"<p>Submitted by koninhoo</p>"},{"location":"extras/customize_running/#summary","title":"Summary","text":"<p>Customize the running widget</p>"},{"location":"extras/customize_running/#docstring","title":"Docstring","text":""},{"location":"extras/dataframe_explorer/","title":"\ud83d\udd2d Dataframe Explorer","text":"<p>Submitted by Streamlit Data Team!</p>"},{"location":"extras/dataframe_explorer/#summary","title":"Summary","text":"<p>Let your viewers explore dataframes themselves! Learn more about it on this blog post</p>"},{"location":"extras/dataframe_explorer/#docstring","title":"Docstring","text":""},{"location":"extras/dataframe_explorer/#src.streamlit_extras.dataframe_explorer.dataframe_explorer","title":"<code>dataframe_explorer(df, case=True)</code>","text":"<p>Adds a UI on top of a dataframe to let viewers filter columns</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Original dataframe</p> required <code>case</code> <code>bool</code> <p>If True, text inputs will be case sensitive. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Filtered dataframe</p> Source code in <code>src/streamlit_extras/dataframe_explorer/__init__.py</code> <pre><code>@extra\ndef dataframe_explorer(df: pd.DataFrame, case: bool = True) -&gt; pd.DataFrame:\n\"\"\"\n    Adds a UI on top of a dataframe to let viewers filter columns\n\n    Args:\n        df (pd.DataFrame): Original dataframe\n        case (bool, optional): If True, text inputs will be case sensitive. Defaults to True.\n\n    Returns:\n        pd.DataFrame: Filtered dataframe\n    \"\"\"\n\n    random_key_base = pd.util.hash_pandas_object(df)\n\n    df = df.copy()\n\n    # Try to convert datetimes into standard format (datetime, no timezone)\n    for col in df.columns:\n        if is_object_dtype(df[col]):\n            try:\n                df[col] = pd.to_datetime(df[col])\n            except Exception:\n                pass\n\n        if is_datetime64_any_dtype(df[col]):\n            df[col] = df[col].dt.tz_localize(None)\n\n    modification_container = st.container()\n\n    with modification_container:\n        to_filter_columns = st.multiselect(\n            \"Filter dataframe on\",\n            df.columns,\n            key=f\"{random_key_base}_multiselect\",\n        )\n        filters: Dict[str, Any] = dict()\n        for column in to_filter_columns:\n            left, right = st.columns((1, 20))\n            # Treat columns with &lt; 10 unique values as categorical\n            if is_categorical_dtype(df[column]) or df[column].nunique() &lt; 10:\n                left.write(\"\u21b3\")\n                filters[column] = right.multiselect(\n                    f\"Values for {column}\",\n                    df[column].unique(),\n                    default=list(df[column].unique()),\n                    key=f\"{random_key_base}_{column}\",\n                )\n                df = df[df[column].isin(filters[column])]\n            elif is_numeric_dtype(df[column]):\n                left.write(\"\u21b3\")\n                _min = float(df[column].min())\n                _max = float(df[column].max())\n                step = (_max - _min) / 100\n                filters[column] = right.slider(\n                    f\"Values for {column}\",\n                    _min,\n                    _max,\n                    (_min, _max),\n                    step=step,\n                    key=f\"{random_key_base}_{column}\",\n                )\n                df = df[df[column].between(*filters[column])]\n            elif is_datetime64_any_dtype(df[column]):\n                left.write(\"\u21b3\")\n                filters[column] = right.date_input(\n                    f\"Values for {column}\",\n                    value=(\n                        df[column].min(),\n                        df[column].max(),\n                    ),\n                    key=f\"{random_key_base}_{column}\",\n                )\n                if len(filters[column]) == 2:\n                    filters[column] = tuple(map(pd.to_datetime, filters[column]))\n                    start_date, end_date = filters[column]\n                    df = df.loc[df[column].between(start_date, end_date)]\n            else:\n                left.write(\"\u21b3\")\n                filters[column] = right.text_input(\n                    f\"Pattern in {column}\",\n                    key=f\"{random_key_base}_{column}\",\n                )\n                if filters[column]:\n                    df = df[df[column].str.contains(filters[column], case=case)]\n\n    return df\n</code></pre>"},{"location":"extras/echo_expander/","title":"\ud83c\udd92 Echo Expander","text":"<p>Submitted by Brian Hess</p>"},{"location":"extras/echo_expander/#summary","title":"Summary","text":"<p>Execute code, and show the code that was executed, but in an expander.</p>"},{"location":"extras/echo_expander/#docstring","title":"Docstring","text":""},{"location":"extras/echo_expander/#src.streamlit_extras.echo_expander.echo_expander","title":"<code>echo_expander(code_location='above', expander=True, label='Show code')</code>","text":"<p>Use in a <code>with</code> block to draw some code on the app, then execute it.</p>"},{"location":"extras/echo_expander/#src.streamlit_extras.echo_expander.echo_expander--parameters","title":"Parameters","text":"<p>code_location : \"above\" or \"below\"     Whether to show the echoed code before or after the results of the     executed code block.     Default is \"above\" expander : Boolean     Whether the code block should occur in an expander.     If False, then same as <code>st.echo</code>     Default is True label : Text     If expander is True, then the label for the expander.     Default is \"Show code\"</p>"},{"location":"extras/echo_expander/#src.streamlit_extras.echo_expander.echo_expander--example","title":"Example","text":"<p>with st.echo():     st.write('This code will be printed')</p> <p>with st.echo_expander(code_location=\"below\", expander=True, label=\"Expand to see the code\"):     st.write('This code will be printed in an expander')</p> Source code in <code>src/streamlit_extras/echo_expander/__init__.py</code> <pre><code>@extra\n@contextlib.contextmanager\ndef echo_expander(code_location=\"above\", expander=True, label=\"Show code\"):\n\"\"\"Use in a `with` block to draw some code on the app, then execute it.\n\n    Parameters\n    ----------\n    code_location : \"above\" or \"below\"\n        Whether to show the echoed code before or after the results of the\n        executed code block.\n        Default is \"above\"\n    expander : Boolean\n        Whether the code block should occur in an expander.\n        If False, then same as `st.echo`\n        Default is True\n    label : Text\n        If expander is True, then the label for the expander.\n        Default is \"Show code\"\n\n    Example\n    -------\n\n    &gt;&gt;&gt; with st.echo():\n    &gt;&gt;&gt;     st.write('This code will be printed')\n\n    &gt;&gt;&gt; with st.echo_expander(code_location=\"below\", expander=True, label=\"Expand to see the code\"):\n    &gt;&gt;&gt;     st.write('This code will be printed in an expander')\n\n    \"\"\"\n\n    from streamlit import empty, source_util\n\n    if code_location == \"above\":\n        placeholder = empty()\n    else:\n        placeholder = st\n\n    try:\n        # Get stack frame *before* running the echoed code. The frame's\n        # line number will point to the `st.echo` statement we're running.\n        frame = traceback.extract_stack()[-3]\n        filename, start_line = frame.filename, frame.lineno\n\n        # Read the file containing the source code of the echoed statement.\n        with source_util.open_python_file(filename) as source_file:\n            source_lines = source_file.readlines()\n\n        # Use ast to parse the Python file and find the code block to display\n        import ast\n\n        ap = ast.parse(\"\".join(source_lines))\n\n        ap_map = {}\n\n        def map_ast(a):\n            if not hasattr(a, \"body\"):\n                return\n            for b in a.body:\n                ap_map[b.lineno] = b\n                map_ast(b)\n\n        map_ast(ap)\n        lines_to_display = source_lines[\n            ap_map[start_line].body[0].lineno - 1 : ap_map[start_line].end_lineno\n        ]\n        code_string = textwrap.dedent(\"\".join(lines_to_display))\n\n        # Run the echoed code...\n        yield\n\n        # And draw the code string to the app!\n        if expander:\n            placeholder.expander(label).code(code_string, \"python\")\n        else:\n            placeholder.code(code_string, \"python\")\n\n    except FileNotFoundError as err:\n        placeholder.warning(\"Unable to display code. %s\" % err)\n</code></pre>"},{"location":"extras/embed_code/","title":"\ud83d\udccb Embed Code","text":"<p>Submitted by randyzwitch</p>"},{"location":"extras/embed_code/#summary","title":"Summary","text":"<p>Embed code from various platforms (Gists, snippets...)</p>"},{"location":"extras/embed_code/#docstring","title":"Docstring","text":""},{"location":"extras/faker/","title":"\ud83e\udd77 Faker","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/faker/#summary","title":"Summary","text":"<p>Fake Streamlit commands at the speed of light! Great for prototyping apps.</p>"},{"location":"extras/faker/#docstring","title":"Docstring","text":""},{"location":"extras/function_explorer/","title":"\ud83d\udc69\u200d\ud83d\ude80 Function Explorer","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/function_explorer/#summary","title":"Summary","text":"<p>Give a UI to any Python function! Very alpha though</p>"},{"location":"extras/function_explorer/#docstring","title":"Docstring","text":""},{"location":"extras/function_explorer/#src.streamlit_extras.function_explorer.function_explorer","title":"<code>function_explorer(func)</code>","text":"<p>Gives a Streamlit UI to any function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>callable</code> <p>Python function</p> required Source code in <code>src/streamlit_extras/function_explorer/__init__.py</code> <pre><code>@extra\ndef function_explorer(func: Callable):\n\"\"\"Gives a Streamlit UI to any function.\n\n    Args:\n        func (callable): Python function\n    \"\"\"\n\n    args = get_arg_details(func)\n    inputs: Dict[str, Any] = dict()\n\n    st.write(\"##### Inputs\")\n    st.write(\n        f\"Go ahead and play with `{func.__name__}` parameters, see how\"\n        \" they change the output!\"\n    )\n\n    for argument_info in args:\n        argument, type_hint, default = argument_info.values()\n        label = argument if not is_empty(default) else f\"{argument}*\"\n\n        if is_empty(type_hint):\n            default = (\n                get_arg_from_session_state(func.__name__, argument) or default\n                if not is_empty(default)\n                else \"Sample string\"\n            )\n            inputs[argument] = st.text_input(label, value=default)\n        else:\n            if hasattr(type_hint, \"__name__\"):\n                label += f\" ({type_hint.__name__})\"\n            elif str(type_hint).startswith(\"typing.Literal\"):\n                label += \" (typing.Literal)\"\n            else:\n                raise Exception(f\"Not sure how to handle {type_hint}\")\n            if type_hint == int:\n                default = get_arg_from_session_state(func.__name__, argument) or (\n                    default if not is_empty(default) else 12\n                )\n                inputs[argument] = st.number_input(label, step=1, value=default)\n            elif type_hint == float:\n                default = (\n                    get_arg_from_session_state(func.__name__, argument) or default\n                    if not is_empty(default)\n                    else 12.0\n                )\n                inputs[argument] = st.number_input(label, value=default)\n            elif type_hint == str:\n                if argument.endswith(\"_color\"):\n                    default = (\n                        get_arg_from_session_state(func.__name__, argument) or default\n                        if not is_empty(default)\n                        else \"#000000\"\n                    )\n                    inputs[argument] = st.color_picker(label, value=default)\n                else:\n                    default = (\n                        get_arg_from_session_state(func.__name__, argument) or default\n                        if not is_empty(default)\n                        else \"Sample string\"\n                    )\n                    inputs[argument] = st_keyup(label, value=default)\n            elif type_hint == bool:\n                default = (\n                    get_arg_from_session_state(func.__name__, argument) or default\n                    if not is_empty(default)\n                    else True\n                )\n                inputs[argument] = st.checkbox(label, value=default)\n            elif type_hint == pd.DataFrame:\n                inputs[argument] = get_arg_from_session_state(\n                    func.__name__, argument\n                ) or pd.DataFrame([\"abcde\"])\n            elif str(type_hint).startswith(\"typing.Literal\"):\n                options = get_args(type_hint)\n                default = (\n                    get_arg_from_session_state(func.__name__, argument) or default\n                    if not is_empty(default)\n                    else options[0]\n                )\n                idx = options.index(default)\n                inputs[argument] = st.selectbox(label, options, index=idx)\n            else:\n                st.warning(f\"`function_explorer` does not support type {type_hint}\")\n\n    st.write(\"##### Output\")\n    func(**inputs)\n    if func.__name__ not in st.session_state:\n        st.session_state[func.__name__] = {}\n    st.session_state[func.__name__][\"inputs\"] = inputs\n</code></pre>"},{"location":"extras/grid/","title":"\ud83d\udca0 Grid","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/grid/#summary","title":"Summary","text":"<p>A multi-element container that places elements on a specified grid layout.</p>"},{"location":"extras/grid/#docstring","title":"Docstring","text":""},{"location":"extras/grid/#src.streamlit_extras.grid.grid","title":"<code>grid(*spec, gap='small', vertical_align='top')</code>","text":"<p>Insert a multi-element, grid container into your app.</p> <p>This function inserts a container into your app that arranges multiple elements in a grid layout as defined by the provided spec. Elements can be added to the returned container by calling methods directly on the returned object.</p>"},{"location":"extras/grid/#src.streamlit_extras.grid.grid--parameters","title":"Parameters","text":"<p>*spec : int or iterable of numbers     One or many row specs controlling the number and width of cells in each row.     Each spec can be one of:</p> <pre><code>* An integer specifying the number of cells. In this case, all cells have equal\nwidth.\n* An iterable of numbers (int or float) specifying the relative width of\neach cell. E.g., ``[0.7, 0.3]`` creates two cells, the first\none occupying 70% of the available width and the second one 30%.\nOr, ``[1, 2, 3]`` creates three cells where the second one is twice\nas wide as the first one, and the third one is three times that width.\n\nThe function iterates over the provided specs in a round-robin order. Upon filling a row,\nit moves on to the next spec, or the first spec if there are no\nmore specs.\n</code></pre> \"small\", \"medium\", or \"large\" <p>The size of the gap between cells, specified as \"small\", \"medium\", or \"large\". This parameter defines the visual space between grid cells. Defaults to \"small\".</p> \"top\", \"center\", or \"bottom\" <p>The vertical alignment of the cells in the row. It can be either \"top\", \"center\", or \"bottom\", aligning the contents of each cell accordingly. Defaults to \"top\".</p>"},{"location":"extras/grid/#src.streamlit_extras.grid.grid--returns","title":"Returns","text":"<p>GridContainer     A grid container object. Elements can be added to this grid by calling methods     directly on the returned object.</p> Source code in <code>src/streamlit_extras/grid/__init__.py</code> <pre><code>@extra\ndef grid(\n    *spec: SpecType,\n    gap: Optional[str] = \"small\",\n    vertical_align: Literal[\"top\", \"center\", \"bottom\"] = \"top\",\n):\n\"\"\"\n    Insert a multi-element, grid container into your app.\n\n    This function inserts a container into your app that arranges\n    multiple elements in a grid layout as defined by the provided spec.\n    Elements can be added to the returned container by calling methods directly\n    on the returned object.\n\n    Parameters\n    ----------\n    *spec : int or iterable of numbers\n        One or many row specs controlling the number and width of cells in each row.\n        Each spec can be one of:\n\n        * An integer specifying the number of cells. In this case, all cells have equal\n        width.\n        * An iterable of numbers (int or float) specifying the relative width of\n        each cell. E.g., ``[0.7, 0.3]`` creates two cells, the first\n        one occupying 70% of the available width and the second one 30%.\n        Or, ``[1, 2, 3]`` creates three cells where the second one is twice\n        as wide as the first one, and the third one is three times that width.\n\n        The function iterates over the provided specs in a round-robin order. Upon filling a row,\n        it moves on to the next spec, or the first spec if there are no\n        more specs.\n\n    gap : \"small\", \"medium\", or \"large\"\n        The size of the gap between cells, specified as \"small\", \"medium\", or \"large\".\n        This parameter defines the visual space between grid cells. Defaults to \"small\".\n\n    vertical_align : \"top\", \"center\", or \"bottom\"\n        The vertical alignment of the cells in the row. It can be either \"top\",\n        \"center\", or \"bottom\", aligning the contents of each cell accordingly. Defaults to \"top\".\n\n    Returns\n    -------\n    GridContainer\n        A grid container object. Elements can be added to this grid by calling methods\n        directly on the returned object.\n    \"\"\"\n\n    container = stylable_container.stylable_container(\n        key=f\"grid_{vertical_align}\",\n        css_styles=[\n\"\"\"\ndiv[data-testid=\"column\"] &gt; div {\nheight: 100%;\n}\n\"\"\",\n            f\"\"\"\ndiv[data-testid=\"column\"] &gt; div &gt; div[data-testid=\"stVerticalBlock\"] &gt; div.element-container {{\n{\"margin-top: auto;\" if vertical_align in [\"center\", \"bottom\"] else \"\"}\n{\"margin-bottom: auto;\" if vertical_align == \"center\" else \"\"}\n}}\n\"\"\",\n        ],\n    )\n\n    return GridDeltaGenerator(\n        parent_dg=container, spec=list(spec), gap=gap, repeat=True\n    )\n</code></pre>"},{"location":"extras/image_coordinates/","title":"\ud83c\udfaf Image Coordinates","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/image_coordinates/#summary","title":"Summary","text":"<p>Allows you to add an image to your app, and get the coordinates of where the user last clicked on the image.</p>"},{"location":"extras/image_coordinates/#docstring","title":"Docstring","text":""},{"location":"extras/image_coordinates/#src.streamlit_extras.image_coordinates.example","title":"<code>example()</code>","text":""},{"location":"extras/image_coordinates/#src.streamlit_extras.image_coordinates.example--click-on-the-image","title":"Click on the image","text":"Source code in <code>src/streamlit_extras/image_coordinates/__init__.py</code> <pre><code>def example():\n    \"# Click on the image\"\n    last_coordinates = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\n\n    st.write(last_coordinates)\n</code></pre>"},{"location":"extras/image_in_tables/","title":"\ud83d\udea9 Image In Tables","text":"<p>Submitted by dataprofessor</p>"},{"location":"extras/image_in_tables/#summary","title":"Summary","text":"<p>Transform URLs into images in your dataframes</p>"},{"location":"extras/image_in_tables/#docstring","title":"Docstring","text":""},{"location":"extras/keyboard_text/","title":"\u2328\ufe0f Keyboard Text","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/keyboard_text/#summary","title":"Summary","text":"<p>Create a keyboard styled text</p>"},{"location":"extras/keyboard_text/#docstring","title":"Docstring","text":""},{"location":"extras/keyboard_text/#src.streamlit_extras.keyboard_text.key","title":"<code>key(text, write=True)</code>","text":"<p>Applies a custom CSS to input text which makes it look like a keyboard key. To be used after running load_key_css() at least once in the app!</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text that will be styled as a key</p> required <code>write</code> <code>bool</code> <p>If True, this will st.write() the key</p> <code>True</code> <p>Returns:     str: HTML of the text, styled as a key</p> Source code in <code>src/streamlit_extras/keyboard_text/__init__.py</code> <pre><code>@extra\ndef key(text: str, write: bool = True) -&gt; str:\n\"\"\"Applies a custom CSS to input text which makes it look like a keyboard key.\n    To be used after running load_key_css() at least once in the app!\n\n    Args:\n        text (str): Text that will be styled as a key\n        write (bool): If True, this will st.write() the key\n    Returns:\n        str: HTML of the text, styled as a key\n    \"\"\"\n\n    key_html = str(span(_class=\"keyx\")(text))\n\n    if write:\n        st.write(key_html, unsafe_allow_html=True)\n\n    return key_html\n</code></pre>"},{"location":"extras/keyboard_url/","title":"\ud83c\udfaf Keyboard Url","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/keyboard_url/#summary","title":"Summary","text":"<p>Create bindings so that hitting a key on your keyboard opens an URL in a new tab!</p>"},{"location":"extras/keyboard_url/#docstring","title":"Docstring","text":""},{"location":"extras/keyboard_url/#src.streamlit_extras.keyboard_url.keyboard_to_url","title":"<code>keyboard_to_url(key=None, key_code=None, url=None)</code>","text":"<p>Map a keyboard key to open a new tab with a given URL. Args:     key (str, optional): Key to trigger (example 'k'). Defaults to None.     key_code (int, optional): If key doesn't work, try hard-coding the key_code instead. Defaults to None.     url (str, optional): Opens the input URL in new tab. Defaults to None.</p> Source code in <code>src/streamlit_extras/keyboard_url/__init__.py</code> <pre><code>@extra\ndef keyboard_to_url(\n    key: str | None = None,\n    key_code: int | None = None,\n    url: str | None = None,\n):\n\"\"\"Map a keyboard key to open a new tab with a given URL.\n    Args:\n        key (str, optional): Key to trigger (example 'k'). Defaults to None.\n        key_code (int, optional): If key doesn't work, try hard-coding the key_code instead. Defaults to None.\n        url (str, optional): Opens the input URL in new tab. Defaults to None.\n    \"\"\"\n\n    assert not (\n        key and key_code\n    ), \"\"\"You can not provide key and key_code.\n    Either give key and we'll try to find its associated key_code. Or directly\n    provide the key_code.\"\"\"\n\n    assert (key or key_code) and url, \"\"\"You must provide key or key_code, and a URL\"\"\"\n\n    if key:\n        key_code_js_row = f\"const keyCode = '{key}'.toUpperCase().charCodeAt(0);\"\n    elif key_code:\n        key_code_js_row = f\"const keyCode = {key_code};\"\n    else:\n        raise ValueError(\"You must provide key or key_code\")\n\n    components.html(\n        f\"\"\"\n&lt;script&gt;\nconst doc = window.parent.document;\nbuttons = Array.from(doc.querySelectorAll('button[kind=primary]'));\n{key_code_js_row}\ndoc.addEventListener('keydown', function(e) {{\n    e = e || window.event;\n    var target = e.target || e.srcElement;\n    // Only trigger the events if they're not happening in an input/textarea/select/button field\n    if ( !/INPUT|TEXTAREA|SELECT|BUTTON/.test(target.nodeName) ) {{\n        switch (e.keyCode) {{\n            case keyCode:\n                window.open('{url}', '_blank').focus();\n                break;\n}}\n}}\n}});\n&lt;/script&gt;\n\"\"\",\n        height=0,\n        width=0,\n    )\n</code></pre>"},{"location":"extras/let_it_rain/","title":"\ud83c\udf27\ufe0f Let It Rain","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/let_it_rain/#summary","title":"Summary","text":"<p>Use this to create more animations like st.balloons() and st.snow()</p>"},{"location":"extras/let_it_rain/#docstring","title":"Docstring","text":""},{"location":"extras/let_it_rain/#src.streamlit_extras.let_it_rain.rain","title":"<code>rain(emoji, font_size=64, falling_speed=5, animation_length='infinite')</code>","text":"<p>Creates a CSS animation where input emoji falls from top to bottom of the screen.</p> Source code in <code>src/streamlit_extras/let_it_rain/__init__.py</code> <pre><code>@extra\ndef rain(\n    emoji: str,\n    font_size: int = 64,\n    falling_speed: int = 5,\n    animation_length: Union[int, str] = \"infinite\",\n):\n\"\"\"\n    Creates a CSS animation where input emoji falls from top to bottom of the screen.\n    \"\"\"\n\n    if isinstance(animation_length, int):\n        animation_length = f\"{animation_length}\"\n\n    st.write(\n        f\"\"\"\n    &lt;style&gt;\n\n    body {{\n    background: gray;\n}}\n\n    .emoji {{\n    color: #777;\n    font-size: {font_size}px;\n    font-family: Arial;\n    // text-shadow: 0 0 5px #000;\n}}\n\n    ///*delete for no hover-effect*/\n    //.emoji:hover {{\n    //  font-size: 60px;\n    //  text-shadow: 5px 5px 5px white;\n    //}}\n\n    @-webkit-keyframes emojis-fall {{\n    0% {{\n        top: -10%;\n}}\n    100% {{\n        top: 100%;\n}}\n}}\n    @-webkit-keyframes emojis-shake {{\n    0% {{\n        -webkit-transform: translateX(0px);\n        transform: translateX(0px);\n}}\n    50% {{\n        -webkit-transform: translateX(20px);\n        transform: translateX(20px);\n}}\n    100% {{\n        -webkit-transform: translateX(0px);\n        transform: translateX(0px);\n}}\n}}\n    @keyframes emojis-fall {{\n    0% {{\n        top: -10%;\n}}\n    100% {{\n        top: 100%;\n}}\n}}\n    @keyframes emojis-shake {{\n    0% {{\n        transform: translateX(0px);\n}}\n    25% {{\n        transform: translateX(15px);\n}}\n    50% {{\n        transform: translateX(-15px);\n}}\n    100% {{\n        transform: translateX(0px);\n}}\n}}\n\n    .emoji {{\n    position: fixed;\n    top: -10%;\n    z-index: 99999;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    cursor: default;\n    -webkit-animation-name: emojis-fall, emojis-shake;\n    -webkit-animation-duration: 5s, 3s;\n    -webkit-animation-timing-function: linear, ease-in-out;\n    -webkit-animation-iteration-count: {animation_length}, {animation_length}; // overall length\n    -webkit-animation-play-state: running, running;\n    animation-name: emojis-fall, emojis-shake;\n    animation-duration: {falling_speed}s, 3s;  // fall speed\n    animation-timing-function: linear, ease-in-out;\n    animation-iteration-count: {animation_length}, {animation_length}; // overall length\n    animation-play-state: running, running;\n}}\n    .emoji:nth-of-type(0) {{\n    left: 1%;\n    -webkit-animation-delay: 0s, 0s;\n    animation-delay: 0s, 0s;\n}}\n    .emoji:nth-of-type(1) {{\n    left: 10%;\n    -webkit-animation-delay: 1s, 1s;\n    animation-delay: 1s, 1s;\n}}\n    .emoji:nth-of-type(2) {{\n    left: 20%;\n    -webkit-animation-delay: 6s, 0.5s;\n    animation-delay: 6s, 0.5s;\n}}\n    .emoji:nth-of-type(3) {{\n    left: 30%;\n    -webkit-animation-delay: 4s, 2s;\n    animation-delay: 4s, 2s;\n}}\n    .emoji:nth-of-type(4) {{\n    left: 40%;\n    -webkit-animation-delay: 2s, 2s;\n    animation-delay: 2s, 2s;\n}}\n    .emoji:nth-of-type(5) {{\n    left: 50%;\n    -webkit-animation-delay: 8s, 3s;\n    animation-delay: 8s, 3s;\n}}\n    .emoji:nth-of-type(6) {{\n    left: 60%;\n    -webkit-animation-delay: 6s, 2s;\n    animation-delay: 6s, 2s;\n}}\n    .emoji:nth-of-type(7) {{\n    left: 70%;\n    -webkit-animation-delay: 2.5s, 1s;\n    animation-delay: 2.5s, 1s;\n}}\n    .emoji:nth-of-type(8) {{\n    left: 80%;\n    -webkit-animation-delay: 1s, 0s;\n    animation-delay: 1s, 0s;\n}}\n    .emoji:nth-of-type(9) {{\n    left: 90%;\n    -webkit-animation-delay: 3s, 1.5s;\n    animation-delay: 3s, 1.5s;\n}}\n\n    &lt;/style&gt;\n    \"\"\",\n        unsafe_allow_html=True,\n    )\n\n    st.write(\n        f\"\"\"\n    &lt;!--get emojis from https://getemoji.com--&gt;\n    &lt;div class=\"emojis\"&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n        &lt;div class=\"emoji\"&gt;\n{emoji}\n        &lt;/div&gt;\n    &lt;/div&gt;\n    \"\"\",\n        unsafe_allow_html=True,\n    )\n</code></pre>"},{"location":"extras/mandatory_date_range/","title":"\ud83d\udcc5 Mandatory Date Range","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/mandatory_date_range/#summary","title":"Summary","text":"<p>Just like st.date_input, but enforces that it always and only returns a start and end date, even if the user has only selected one of the dates. Until the user selects both dates, the app will not run.</p>"},{"location":"extras/mandatory_date_range/#docstring","title":"Docstring","text":""},{"location":"extras/mandatory_date_range/#src.streamlit_extras.mandatory_date_range.date_range_picker","title":"<code>date_range_picker(title, default_start=None, default_end=None, min_date=None, max_date=None, error_message='Please select start and end date', key=None)</code>","text":"<p>Working with date_input with a date range is frustrating becuase if you're assuming you will get a start and end date out of it, your code can break (not to mention your type hints), because if a user clicks on just one date, the app will go ahead and run with a single output. This widget enforces a start and end date being selected, and will stop the app if only one is chosen.</p> <p>Defaults to a range of 30 days ago to today</p> <p>Returns the selected start and end date</p> Source code in <code>src/streamlit_extras/mandatory_date_range/__init__.py</code> <pre><code>@extra\ndef date_range_picker(\n    title: str,\n    default_start: Optional[date] = None,\n    default_end: Optional[date] = None,\n    min_date: Optional[date] = None,\n    max_date: Optional[date] = None,\n    error_message: str = \"Please select start and end date\",\n    key: Optional[str] = None,\n) -&gt; Tuple[date, date]:\n\"\"\"\n    Working with date_input with a date range is frustrating becuase if you're\n    assuming you will get a start and end date out of it, your code can break (not\n    to mention your type hints), because if a user clicks on just one date, the app\n    will go ahead and run with a single output. This widget enforces a start and\n    end date being selected, and will stop the app if only one is chosen.\n\n    Defaults to a range of 30 days ago to today\n\n    Returns the selected start and end date\n    \"\"\"\n\n    if default_start is None:\n        default_start = date.today() - timedelta(days=30)\n    if default_end is None:\n        default_end = date.today()\n\n    val = st.date_input(\n        title,\n        value=[default_start, default_end],\n        min_value=min_date,\n        max_value=max_date,\n        key=key,\n    )\n    try:\n        start_date, end_date = cast(Tuple[date, date], val)\n    except ValueError:\n        st.error(error_message)\n        st.stop()\n\n    return start_date, end_date\n</code></pre>"},{"location":"extras/markdownlit/","title":"\u303d\ufe0f Markdownlit","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/markdownlit/#summary","title":"Summary","text":"<p>markdownlit adds a set of lit Markdown commands for your Streamlit apps!</p>"},{"location":"extras/markdownlit/#docstring","title":"Docstring","text":""},{"location":"extras/mention/","title":"\ud83e\udef5 Mention","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/mention/#summary","title":"Summary","text":"<p>Create nice links with icons, like Notion mentions!</p>"},{"location":"extras/mention/#docstring","title":"Docstring","text":""},{"location":"extras/mention/#src.streamlit_extras.mention.mention","title":"<code>mention(label, url, icon='\ud83d\udd17', write=True)</code>","text":"<p>Mention a link with a label and icon.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Label to use in the mention</p> required <code>icon</code> <code>str</code> <p>Icon to use. Can be an emoji or a URL. Default '\ud83d\udd17'</p> <code>'\ud83d\udd17'</code> <code>url</code> <code>str</code> <p>Target URL of the mention</p> required <code>write</code> <code>bool</code> <p>Writes the mention directly. If False, returns the raw HTML.           Useful if mention is used inline.</p> <code>True</code> Source code in <code>src/streamlit_extras/mention/__init__.py</code> <pre><code>@extra\ndef mention(label: str, url: str, icon: str = \"\ud83d\udd17\", write: bool = True):\n\"\"\"Mention a link with a label and icon.\n\n    Args:\n        label (str): Label to use in the mention\n        icon (str): Icon to use. Can be an emoji or a URL. Default '\ud83d\udd17'\n        url (str): Target URL of the mention\n        write (bool): Writes the mention directly. If False, returns the raw HTML.\n                      Useful if mention is used inline.\n    \"\"\"\n\n    if icon.lower() == \"github\":\n        icon = GITHUB_ICON\n    elif icon.lower() == \"notion\":\n        icon = NOTION_ICON\n    elif icon.lower() == \"twitter\":\n        icon = TWITTER_ICON\n    elif icon.lower() == \"streamlit\":\n        icon = STREAMLIT_ICON\n\n    if validate_url(icon):\n        icon_html = img(\n            src=icon,\n            style=\"width:1em;height:1em;vertical-align:-0.15em;border-radius:3px;margin-right:0.3em\",\n        )\n    else:\n        icon_html = icon + \"\u00a0\u00a0\"\n\n    mention_html = a(\n        contenteditable=False,\n        href=url,\n        rel=\"noopener noreferrer\",\n        style=\"color:inherit;text-decoration:inherit; height:auto!important\",\n        target=\"_blank\",\n    )(\n        span(),\n        icon_html,\n        span(\n            style=(\n                \"border-bottom:0.05em solid\"\n                \" rgba(55,53,47,0.25);font-weight:500;flex-shrink:0\"\n            )\n        )(label),\n        span(),\n    )\n\n    html = STYLE_HTML + str(mention_html)\n    if write:\n        st.write(html, unsafe_allow_html=True)\n    else:\n        return html\n</code></pre>"},{"location":"extras/metric_cards/","title":"\u2660\ufe0f Metric Cards","text":"<p>Submitted by Chanin Nantasenamat</p>"},{"location":"extras/metric_cards/#summary","title":"Summary","text":"<p>Restyle metrics as cards</p>"},{"location":"extras/metric_cards/#docstring","title":"Docstring","text":""},{"location":"extras/no_default_selectbox/","title":"\ud83d\uddf3\ufe0f No Default Selectbox","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/no_default_selectbox/#summary","title":"Summary","text":"<p>Just like st.selectbox, but with no default value -- returns None if nothing is selected.</p> <p>Meant to be a solution to https://github.com/streamlit/streamlit/issues/949</p>"},{"location":"extras/no_default_selectbox/#docstring","title":"Docstring","text":""},{"location":"extras/no_default_selectbox/#src.streamlit_extras.no_default_selectbox.selectbox","title":"<code>selectbox(*args, **kwargs)</code>","text":"<p>A selectbox that returns None unless the user has explicitly selected one of the options.</p> <p>All arguments are passed to st.selectbox except for <code>no_selection_label</code>, which is used to specify the label of the option that represents no selection.</p>"},{"location":"extras/no_default_selectbox/#src.streamlit_extras.no_default_selectbox.selectbox--parameters","title":"Parameters","text":"<p>no_selection_label : str     The label to use for the no-selection option. Defaults to \"---\".</p> Source code in <code>src/streamlit_extras/no_default_selectbox/__init__.py</code> <pre><code>@extra\ndef selectbox(*args, **kwargs):\n\"\"\"A selectbox that returns None unless the user has explicitly selected one of the\n    options.\n\n    All arguments are passed to st.selectbox except for `no_selection_label`, which is\n    used to specify the label of the option that represents no selection.\n\n    Parameters\n    ----------\n    no_selection_label : str\n        The label to use for the no-selection option. Defaults to \"---\".\n    \"\"\"\n    no_selection_label, _args, _kwargs = _transform_arguments(*args, **kwargs)\n\n    result = st.selectbox(*_args, **_kwargs)\n    if result == no_selection_label:\n        return None\n    return result\n</code></pre>"},{"location":"extras/row/","title":"\ud83d\udff0 Row","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/row/#summary","title":"Summary","text":"<p>A multi-element horizontal container that places elements in a row.</p>"},{"location":"extras/row/#docstring","title":"Docstring","text":""},{"location":"extras/row/#src.streamlit_extras.row.row","title":"<code>row(spec, gap='small', vertical_align='top')</code>","text":"<p>Insert a multi-element, horizontal container into your app.</p> <p>This function inserts a container into your app that can hold a number of elements as defined in the provided spec. Elements can be added to the returned container by calling methods directly on the returned object.</p>"},{"location":"extras/row/#src.streamlit_extras.row.row--parameters","title":"Parameters","text":"<p>spec : int or iterable of numbers     Controls the number and width of cells to insert in the row. Can be one of:</p> <pre><code>* An integer specifying the number of cells. All cells will have equal\nwidth in this case.\n* An iterable of numbers (int or float) that specifies the relative width of\neach cell. For instance, ``[0.7, 0.3]`` creates two cells where the first\none occupies 70% of the available width, and the second one occupies 30%.\nOr, ``[1, 2, 3]`` creates three cells where the second one is twice\nas wide as the first one, and the third one is three times that width.\n</code></pre> \"small\", \"medium\", or \"large\" <p>The size of the gap between cells, can be \"small\", \"medium\", or \"large\". This parameter specifies the visual space between the elements within the row. Defaults to \"small\".</p> \"top\", \"center\", or \"bottom\" <p>The vertical alignment of the cells in the row. It can be either \"top\", \"center\", or \"bottom\", aligning the contents of each cell accordingly. Defaults to \"top\".</p>"},{"location":"extras/row/#src.streamlit_extras.row.row--returns","title":"Returns","text":"<p>RowContainer     A row container object. Elements can be added to this row by calling methods directly     on the returned object.</p> Source code in <code>src/streamlit_extras/row/__init__.py</code> <pre><code>@extra\ndef row(\n    spec: SpecType,\n    gap: Optional[str] = \"small\",\n    vertical_align: Literal[\"top\", \"center\", \"bottom\"] = \"top\",\n) -&gt; grid.GridDeltaGenerator:\n\"\"\"\n    Insert a multi-element, horizontal container into your app.\n\n    This function inserts a container into your app that can hold\n    a number of elements as defined in the provided spec. Elements can be added\n    to the returned container by calling methods directly on the returned object.\n\n    Parameters\n    ----------\n    spec : int or iterable of numbers\n        Controls the number and width of cells to insert in the row. Can be one of:\n\n        * An integer specifying the number of cells. All cells will have equal\n        width in this case.\n        * An iterable of numbers (int or float) that specifies the relative width of\n        each cell. For instance, ``[0.7, 0.3]`` creates two cells where the first\n        one occupies 70% of the available width, and the second one occupies 30%.\n        Or, ``[1, 2, 3]`` creates three cells where the second one is twice\n        as wide as the first one, and the third one is three times that width.\n\n    gap : \"small\", \"medium\", or \"large\"\n        The size of the gap between cells, can be \"small\", \"medium\", or \"large\".\n        This parameter specifies the visual space between the elements within the row. Defaults to \"small\".\n\n    vertical_align : \"top\", \"center\", or \"bottom\"\n        The vertical alignment of the cells in the row. It can be either \"top\",\n        \"center\", or \"bottom\", aligning the contents of each cell accordingly. Defaults to \"top\".\n\n    Returns\n    -------\n    RowContainer\n        A row container object. Elements can be added to this row by calling methods directly\n        on the returned object.\n    \"\"\"\n    container = stylable_container.stylable_container(\n        key=f\"row_{vertical_align}\",\n        css_styles=[\n\"\"\"\ndiv[data-testid=\"column\"] &gt; div {\nheight: 100%;\n}\n\"\"\",\n            f\"\"\"\ndiv[data-testid=\"column\"] &gt; div &gt; div[data-testid=\"stVerticalBlock\"] &gt; div.element-container {{\n{\"margin-top: auto;\" if vertical_align in [\"center\", \"bottom\"] else \"\"}\n{\"margin-bottom: auto;\" if vertical_align == \"center\" else \"\"}\n}}\n\"\"\",\n        ],\n    )\n\n    return grid.GridDeltaGenerator(parent_dg=container, spec=[spec], gap=gap)\n</code></pre>"},{"location":"extras/sandbox/","title":"\ud83d\udce6 Sandbox","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/sandbox/#summary","title":"Summary","text":"<p>Execute untrusted Streamlit code in a sandboxed environment.</p>"},{"location":"extras/sandbox/#docstring","title":"Docstring","text":""},{"location":"extras/sandbox/#src.streamlit_extras.sandbox.sandbox","title":"<code>sandbox(code, stlite_version=None, requirements=None, height=700, scrolling=False)</code>","text":"<p>Execute untrusted Streamlit code in a sandboxed environment.</p> <p>This function allows you to execute untrusted Streamlit code inside the user's web browser by using stlite (https://github.com/whitphx/stlite) instead of the App server. This is useful for apps that generate  and execute Streamlit (or Python) code at runtime based on some user instructions. Doing this inside the main Streamlit app would be unsafe since the user could execute arbitrary code on the server.</p> <p>There are a few limitations to this approach: * stlite does not support the full set of Streamlit features. See the stlite documentation   for more details on limitations: https://github.com/whitphx/stlite#limitations * Since the code is executed inside the user's browser, it cannot access any files, session state,   or other functionalities of the server. * The available compute resource depend on the user's machine. So, this is not suited for   heavy computations.</p>"},{"location":"extras/sandbox/#src.streamlit_extras.sandbox.sandbox--parameters","title":"Parameters","text":"str or callable <p>The code to execute. This can either be a string containing the code or a function. If a function is passed, the source code will be extracted automatically. The function is required to be fully self-contained and not reference any variables outside of its scope.</p> str or None <p>The version of stlite to use. If None, the latest version will be used.</p> list of str or None <p>A list of Python packages to install before executing the code. If None, the following packages will be installed: pandas, numpy, plotly, altair.</p> int <p>The height of the embedded app in pixels. Defaults to 700.</p> bool <p>Whether to allow scrolling inside the embedded app. Defaults to False.</p> Source code in <code>src/streamlit_extras/sandbox/__init__.py</code> <pre><code>@extra\ndef sandbox(\n    code: str | Callable[[], None],\n    stlite_version: str | None = None,\n    requirements: List[str] | None = None,\n    height: int = 700,\n    scrolling: bool = False,\n) -&gt; None:\n\"\"\"Execute untrusted Streamlit code in a sandboxed environment.\n\n    This function allows you to execute untrusted Streamlit code inside the user's web browser\n    by using stlite (https://github.com/whitphx/stlite) instead of the App server. This is useful\n    for apps that generate  and execute Streamlit (or Python) code at runtime based on some user\n    instructions. Doing this inside the main Streamlit app would be unsafe since the user could\n    execute arbitrary code on the server.\n\n    There are a few limitations to this approach:\n    * stlite does not support the full set of Streamlit features. See the stlite documentation\n      for more details on limitations: https://github.com/whitphx/stlite#limitations\n    * Since the code is executed inside the user's browser, it cannot access any files, session state,\n      or other functionalities of the server.\n    * The available compute resource depend on the user's machine. So, this is not suited for\n      heavy computations.\n\n    Parameters\n    ----------\n\n    code : str or callable\n        The code to execute. This can either be a string containing the code or a function.\n        If a function is passed, the source code will be extracted automatically. The function\n        is required to be fully self-contained and not reference any variables outside of its\n        scope.\n\n    stlite_version : str or None\n        The version of stlite to use. If None, the latest version will be used.\n\n    requirements : list of str or None\n        A list of Python packages to install before executing the code. If None, the following\n        packages will be installed: pandas, numpy, plotly, altair.\n\n    height : int\n        The height of the embedded app in pixels. Defaults to 700.\n\n    scrolling : bool\n        Whether to allow scrolling inside the embedded app. Defaults to False.\n\n    \"\"\"\n    stlite_css_url = \"https://cdn.jsdelivr.net/npm/@stlite/mountable/build/stlite.css\"\n    stlite_js_url = \"https://cdn.jsdelivr.net/npm/@stlite/mountable/build/stlite.js\"\n\n    if stlite_version is not None:\n        stlite_css_url = f\"https://cdn.jsdelivr.net/npm/@stlite/mountable@{stlite_version}/build/stlite.css\"\n        stlite_js_url = f\"https://cdn.jsdelivr.net/npm/@stlite/mountable@{stlite_version}/build/stlite.js\"\n\n    if inspect.isfunction(code):\n        function_name = code.__name__\n        code = textwrap.dedent(inspect.getsource(code))\n        code += f\"\\n\\n{function_name}()\"\n\n    if not requirements:\n        requirements = [\n            \"pandas\",\n            \"numpy\",\n            \"plotly\",\n            \"altair\",\n        ]\n    html(\n        f\"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    /&gt;\n    &lt;title&gt;Embedded Streamlit App&lt;/title&gt;\n    &lt;link\n      rel=\"stylesheet\"\n      href=\"{stlite_css_url}\"\n    /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script src=\"{stlite_js_url}\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      if (window.location.search !== \"?embed=true{\"&amp;embed_options=disable_scrolling\" if scrolling is False else \"\"}\") {{\n        window.location.search = \"?embed=true{\"&amp;embed_options=disable_scrolling\" if scrolling is False else \"\"}\";\n}}\n      stlite.mount(\n{{\n    requirements: [\"{'\",\"'.join(requirements)}\"], // Packages to install\n    entrypoint: \"streamlit_app.py\",\n    files: {{\n      \"streamlit_app.py\": `\nimport streamlit as st\n\nst.markdown('&lt;style&gt;[data-baseweb~=\"modal\"]{{visibility: hidden;}}&lt;/style&gt;', unsafe_allow_html=True,)\n\n{code}\n`,\n}},\n}},\n        document.getElementById(\"root\")\n      );\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n        \"\"\",\n        height=height,\n        scrolling=scrolling,\n    )\n</code></pre>"},{"location":"extras/st_keyup/","title":"\ud83d\udd11 St Keyup","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/st_keyup/#summary","title":"Summary","text":"<p>A text input that updates with every key press</p>"},{"location":"extras/st_keyup/#docstring","title":"Docstring","text":""},{"location":"extras/stateful_button/","title":"\ud83d\udd1b Stateful Button","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/stateful_button/#summary","title":"Summary","text":"<p>Button that keeps track of its state, so that it works as a toggle button</p>"},{"location":"extras/stateful_button/#docstring","title":"Docstring","text":""},{"location":"extras/stateful_button/#src.streamlit_extras.stateful_button.button","title":"<code>button(*args, key=None, **kwargs)</code>","text":"<p>Works just like a normal streamlit button, but it remembers its state, so that it works as a toggle button. If you click it, it will be pressed, and if you click it again, it will be unpressed.</p> <p>kwargs:     Same as st.button except key is required</p> Source code in <code>src/streamlit_extras/stateful_button/__init__.py</code> <pre><code>@extra\ndef button(*args, key=None, **kwargs):\n\"\"\"\n    Works just like a normal streamlit button, but it remembers its state, so that\n    it works as a toggle button. If you click it, it will be pressed, and if you click\n    it again, it will be unpressed.\n\n    args:\n        Same as st.button\n    kwargs:\n        Same as st.button except key is required\n    \"\"\"\n\n    if key is None:\n        raise ValueError(\"Must pass key\")\n\n    if key not in st.session_state:\n        st.session_state[key] = False\n\n    if \"type\" not in kwargs:\n        kwargs[\"type\"] = \"primary\" if st.session_state[key] else \"secondary\"\n\n    if st.button(*args, **kwargs):\n        st.session_state[key] = not st.session_state[key]\n        st.experimental_rerun()\n\n    return st.session_state[key]\n</code></pre>"},{"location":"extras/stateful_chat/","title":"\ud83d\udcac Stateful Chat","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/stateful_chat/#summary","title":"Summary","text":"<p>A chat container that automatically keeps track of the chat history.</p>"},{"location":"extras/stateful_chat/#docstring","title":"Docstring","text":""},{"location":"extras/stateful_chat/#src.streamlit_extras.stateful_chat.add_message","title":"<code>add_message(name, *args, avatar=None)</code>","text":"<p>Adds a chat message to the chat container.</p> <p>This command can only be used inside the <code>chat</code> container. The message will be displayed in the UI and added to the chat history so that the same message will be automatically displayed on reruns.</p>"},{"location":"extras/stateful_chat/#src.streamlit_extras.stateful_chat.add_message--parameters","title":"Parameters","text":"<p>name : \"user\", \"assistant\", or str     The name of the message author. Can be \u201cuser\u201d or \u201cassistant\u201d to         enable preset styling and avatars.</p> <pre><code>Currently, the name is not shown in the UI but is only set as an\naccessibility label. For accessibility reasons, you should not use\nan empty string.\n</code></pre> str, numpy.ndarray, or BytesIO <p>The avatar shown next to the message. Can be anything that is supported by the <code>avatar</code> parameter of <code>st.chat_message</code>.</p> <p>*args : Any     The content of the message. This can be any number of elements that are supported by     <code>st.write</code> as well as generator functions to stream content to the UI.</p> Source code in <code>src/streamlit_extras/stateful_chat/__init__.py</code> <pre><code>@extra\ndef add_message(\n    name: Literal[\"user\", \"assistant\"] | str,\n    *args: Any,\n    avatar: str | AtomicImage | None = None,\n):\n\"\"\"Adds a chat message to the chat container.\n\n    This command can only be used inside the `chat` container. The message\n    will be displayed in the UI and added to the chat history so that the same\n    message will be automatically displayed on reruns.\n\n    Parameters\n    ----------\n    name : \"user\", \"assistant\", or str\n        The name of the message author. Can be \u201cuser\u201d or \u201cassistant\u201d to\n            enable preset styling and avatars.\n\n        Currently, the name is not shown in the UI but is only set as an\n        accessibility label. For accessibility reasons, you should not use\n        an empty string.\n\n    avatar : str, numpy.ndarray, or BytesIO\n        The avatar shown next to the message. Can be anything that is supported by\n        the `avatar` parameter of `st.chat_message`.\n\n    *args : Any\n        The content of the message. This can be any number of elements that are supported by\n        `st.write` as well as generator functions to stream content to the UI.\n    \"\"\"\n    active_dg = _active_dg()\n\n    if not hasattr(active_dg, \"chat_history\"):\n        raise StreamlitAPIException(\n            \"The `add_message` command can only be used inside a `chat` container.\"\n        )\n\n    displayed_elements = _display_message(name, *args, avatar=avatar)\n    active_dg.chat_history.append(\n        ChatMessage(\n            author=name,\n            avatar=avatar,\n            content=displayed_elements,\n        )\n    )\n</code></pre>"},{"location":"extras/stateful_chat/#src.streamlit_extras.stateful_chat.chat","title":"<code>chat(key='chat_messages')</code>","text":"<p>Insert a stateful chat container into your app.</p> <p>This chat container automatically keeps track of the chat history when you use the <code>add_message</code> command to add messages to the chat.</p>"},{"location":"extras/stateful_chat/#src.streamlit_extras.stateful_chat.chat--parameters","title":"Parameters","text":"str <p>The key that is used to keep track of the chat history in session state. Defaults to \"chat_messages\".</p>"},{"location":"extras/stateful_chat/#src.streamlit_extras.stateful_chat.chat--returns","title":"Returns","text":"<p>Chat Container     The chat container that can be used together with <code>add_message</code> to automatically     keep track of the chat history.</p> Source code in <code>src/streamlit_extras/stateful_chat/__init__.py</code> <pre><code>@extra\ndef chat(key: str = \"chat_messages\") -&gt; \"DeltaGenerator\":\n\"\"\"Insert a stateful chat container into your app.\n\n    This chat container automatically keeps track of the chat history when you use\n    the `add_message` command to add messages to the chat.\n\n    Parameters\n    ----------\n\n    key : str\n        The key that is used to keep track of the chat history in session state. Defaults\n        to \"chat_messages\".\n\n\n    Returns\n    -------\n    Chat Container\n        The chat container that can be used together with `add_message` to automatically\n        keep track of the chat history.\n    \"\"\"\n\n    chat_container = st.container()\n\n    if key not in st.session_state:\n        st.session_state[key] = []\n    chat_history: List[ChatMessage] = st.session_state[key]\n\n    chat_container.chat_history = chat_history  # type: ignore\n\n    with chat_container:\n        for message in chat_history:\n            _display_message(\n                message[\"author\"], *message[\"content\"], avatar=message[\"avatar\"]\n            )\n\n    return chat_container\n</code></pre>"},{"location":"extras/stodo/","title":"\u2714\ufe0f Stodo","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/stodo/#summary","title":"Summary","text":"<p>Simple Python function to create to-do items in Streamlit!</p>"},{"location":"extras/stodo/#docstring","title":"Docstring","text":""},{"location":"extras/stodo/#src.streamlit_extras.stodo.to_do","title":"<code>to_do(st_commands, checkbox_id)</code>","text":"<p>Create a to_do item</p> <p>Parameters:</p> Name Type Description Default <code>st_commands</code> <code>_type_</code> <p>description</p> required <code>checkbox_id</code> <code>_type_</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>src/streamlit_extras/stodo/__init__.py</code> <pre><code>@extra\ndef to_do(st_commands, checkbox_id):\n\"\"\"Create a to_do item\n\n    Args:\n        st_commands (_type_): _description_\n        checkbox_id (_type_): _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    cols = st.columns((1, 20))\n    done = cols[0].checkbox(\" \", key=checkbox_id)\n    if done:\n        for (cmd, *args) in st_commands:\n            with cols[1]:\n                if cmd == st.write:\n                    text = args[0]\n                    cols[1].write(\n                        \"&lt;s style='color: rgba(49, 51, 63, 0.4)'&gt;\" f\" {text} &lt;/s&gt;\",\n                        unsafe_allow_html=True,\n                    )\n                else:\n                    if cmd in (\n                        st.slider,\n                        st.button,\n                        st.checkbox,\n                        st.time_input,\n                        st.color_picker,\n                        st.selectbox,\n                        st.camera_input,\n                        st.radio,\n                        st.date_input,\n                        st.multiselect,\n                        st.text_area,\n                        st.text_input,\n                    ):\n                        cmd(*args, disabled=True)\n                    else:\n                        cmd(*args)\n\n    else:\n        for (cmd, *args) in st_commands:\n            with cols[1]:\n                if cmd == st.write:\n                    st.write(*args, unsafe_allow_html=True)\n                else:\n\n                    cmd(*args)\n    st.write(\"\")\n    return done\n</code></pre>"},{"location":"extras/stoggle/","title":"\u27a1\ufe0f Stoggle","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/stoggle/#summary","title":"Summary","text":"<p>Toggle button just like in Notion!</p>"},{"location":"extras/stoggle/#docstring","title":"Docstring","text":""},{"location":"extras/stoggle/#src.streamlit_extras.stoggle.stoggle","title":"<code>stoggle(summary, content)</code>","text":"<p>Displays a toggle widget in Streamlit Args:     summary (str): Summary of the toggle (always shown)     content (str): Content shown after toggling</p> Source code in <code>src/streamlit_extras/stoggle/__init__.py</code> <pre><code>@extra\ndef stoggle(summary: str, content: str):\n\"\"\"\n    Displays a toggle widget in Streamlit\n    Args:\n        summary (str): Summary of the toggle (always shown)\n        content (str): Content shown after toggling\n    \"\"\"\n\n    st.write(\n        str(\n            div(\n                style=styles(\n                    line_height=1.8,\n                )\n            )(details(smry(summary), p(content)))\n        ),\n        unsafe_allow_html=True,\n    )\n</code></pre>"},{"location":"extras/streaming_write/","title":"\ud83c\udf0a Streaming Write","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/streaming_write/#summary","title":"Summary","text":"<p>Drop-in replacement for <code>st.write</code> with streaming support.</p>"},{"location":"extras/streaming_write/#docstring","title":"Docstring","text":""},{"location":"extras/streaming_write/#src.streamlit_extras.streaming_write.write","title":"<code>write(*args, unsafe_allow_html=False, **kwargs)</code>","text":"<p>Drop-in replacement for <code>st.write</code> with streaming support.</p> <p>This function is a drop-in replacement for <code>st.write</code> that adds additional capabilities: * Supports streaming data via generator functions. * Executes callable objects (e.g. functions) and writes the return value.</p> Source code in <code>src/streamlit_extras/streaming_write/__init__.py</code> <pre><code>@extra\ndef write(*args: Any, unsafe_allow_html: bool = False, **kwargs) -&gt; List[Any]:\n\"\"\"Drop-in replacement for `st.write` with streaming support.\n\n    This function is a drop-in replacement for `st.write` that adds additional capabilities:\n    * Supports streaming data via generator functions.\n    * Executes callable objects (e.g. functions) and writes the return value.\n    \"\"\"\n    if not args:\n        return []\n\n    written_content: List[Any] = []\n    string_buffer: List[str] = []\n\n    def flush_buffer():\n        if string_buffer:\n            text_content = \" \".join(string_buffer)\n            text_container = st.empty()\n            text_container.markdown(text_content)\n            written_content.append(text_content)\n            string_buffer[:] = []\n\n    for arg in args:\n        # Order matters!\n        if isinstance(arg, str):\n            string_buffer.append(arg)\n        elif callable(arg) or inspect.isgenerator(arg):\n            flush_buffer()\n            if inspect.isgeneratorfunction(arg) or inspect.isgenerator(arg):\n                # This causes greyed out effect since this element is missing on rerun:\n                stream_container = None\n                streamed_response = \"\"\n\n                def flush_stream_response():\n                    nonlocal streamed_response\n                    nonlocal stream_container\n                    if streamed_response and stream_container:\n                        stream_container.write(\n                            streamed_response,\n                            unsafe_allow_html=unsafe_allow_html,\n                            **kwargs,\n                        )\n                        written_content.append(streamed_response)\n                        stream_container = None\n                        streamed_response = \"\"\n\n                generator = arg() if inspect.isgeneratorfunction(arg) else arg\n                for chunk in generator:\n                    if isinstance(chunk, str):\n                        first_text = False\n                        if not stream_container:\n                            stream_container = st.empty()\n                            first_text = True\n                        streamed_response += chunk\n                        # Only add the streaming symbol on the second text chunk\n                        stream_container.write(\n                            streamed_response + (\"\" if first_text else \" \u258c\"),\n                            unsafe_allow_html=unsafe_allow_html,\n                            **kwargs,\n                        )\n                    elif callable(chunk):\n                        flush_stream_response()\n                        chunk()\n                        written_content.append(chunk)\n                    else:\n                        flush_stream_response()\n                        st.write(chunk, unsafe_allow_html=unsafe_allow_html, **kwargs)\n                        written_content.append(chunk)\n                flush_stream_response()\n\n            else:\n                return_value = arg()\n                written_content.append(arg)\n                if return_value is not None:\n                    flush_buffer()\n                    st.write(\n                        return_value, unsafe_allow_html=unsafe_allow_html, **kwargs\n                    )\n        else:\n            flush_buffer()\n            st.write(arg, unsafe_allow_html=unsafe_allow_html, **kwargs)\n            written_content.append(arg)\n    flush_buffer()\n    return written_content\n</code></pre>"},{"location":"extras/stylable_container/","title":"\ud83c\udfa8 Stylable Container","text":"<p>Submitted by Lukas Masuch</p>"},{"location":"extras/stylable_container/#summary","title":"Summary","text":"<p>A container that allows to style its child elements using CSS.</p>"},{"location":"extras/stylable_container/#docstring","title":"Docstring","text":""},{"location":"extras/stylable_container/#src.streamlit_extras.stylable_container.stylable_container","title":"<code>stylable_container(key, css_styles)</code>","text":"<p>Insert a container into your app which you can style using CSS.</p> <p>This is useful to style specific elements in your app.</p>"},{"location":"extras/stylable_container/#src.streamlit_extras.stylable_container.stylable_container--parameters","title":"Parameters","text":"<p>key : str     The key associated with this container. This needs to be unique since all styles will be     applied to the container with this key.</p> str or list of str <p>The CSS styles to apply to the container elements. This can be a single CSS block or a list of CSS blocks.</p>"},{"location":"extras/stylable_container/#src.streamlit_extras.stylable_container.stylable_container--returns","title":"Returns","text":"<p>DeltaGenerator     A container object. Elements can be added to this container using either the 'with'     notation or by calling methods directly on the returned object.</p> Source code in <code>src/streamlit_extras/stylable_container/__init__.py</code> <pre><code>@extra\ndef stylable_container(key: str, css_styles: str | List[str]) -&gt; \"DeltaGenerator\":\n\"\"\"Insert a container into your app which you can style using CSS.\n\n    This is useful to style specific elements in your app.\n\n    Parameters\n    ----------\n    key : str\n        The key associated with this container. This needs to be unique since all styles will be\n        applied to the container with this key.\n\n    css_styles : str or list of str\n        The CSS styles to apply to the container elements. This can be a single CSS block or a list of\n        CSS blocks.\n\n    Returns\n    -------\n    DeltaGenerator\n        A container object. Elements can be added to this container using either the 'with'\n        notation or by calling methods directly on the returned object.\n    \"\"\"\n    if isinstance(css_styles, str):\n        css_styles = [css_styles]\n\n    # Remove unneeded spacing that is added by the style markdown:\n    css_styles.append(\n\"\"\"\n&gt; div:first-child {\n    margin-bottom: -1rem;\n}\n\"\"\"\n    )\n\n    style_text = \"\"\"\n&lt;style&gt;\n\"\"\"\n\n    for style in css_styles:\n        style_text += f\"\"\"\n\ndiv[data-testid=\"stVerticalBlock\"]:has(&gt; div.element-container &gt; div.stMarkdown &gt; div[data-testid=\"stMarkdownContainer\"] &gt; p &gt; span.{key}) {style}\n\n\"\"\"\n\n    style_text += f\"\"\"\n    &lt;/style&gt;\n\n&lt;span class=\"{key}\"&gt;&lt;/span&gt;\n\"\"\"\n\n    container = st.container()\n    container.markdown(style_text, unsafe_allow_html=True)\n    return container\n</code></pre>"},{"location":"extras/switch_page_button/","title":"\ud83d\uddb1\ufe0f Switch Page Button","text":"<p>Submitted by Zachary Blackwood</p>"},{"location":"extras/switch_page_button/#summary","title":"Summary","text":"<p>Function to switch page programmatically in a MPA</p>"},{"location":"extras/switch_page_button/#docstring","title":"Docstring","text":""},{"location":"extras/tags/","title":"\ud83d\udd16 Tags","text":"<p>Submitted by Maggie Liu</p>"},{"location":"extras/tags/#summary","title":"Summary","text":"<p>Display tags like github issues!</p>"},{"location":"extras/tags/#docstring","title":"Docstring","text":""},{"location":"extras/tags/#src.streamlit_extras.tags.tagger_component","title":"<code>tagger_component(content, tags, color_name=None)</code>","text":"<p>Displays tags next to your text. Args:     content (str): Content to be tagged     tags (list): A list of tags to be displayed next to the content     color_name: A list or a string that indicates the color of tags.     Choose from lightblue, orange, bluegreen, blue, violet, red, green, yellow</p> Source code in <code>src/streamlit_extras/tags/__init__.py</code> <pre><code>@extra\ndef tagger_component(\n    content: str,\n    tags: list[str],\n    color_name: list[VALID_COLOR_NAMES] | VALID_COLOR_NAMES | None = None,\n):\n\"\"\"\n    Displays tags next to your text.\n    Args:\n        content (str): Content to be tagged\n        tags (list): A list of tags to be displayed next to the content\n        color_name: A list or a string that indicates the color of tags.\n        Choose from lightblue, orange, bluegreen, blue, violet, red, green, yellow\n    \"\"\"\n    if isinstance(color_name, str):\n        if color_name not in TAGGER_COLOR_PALETTE:\n            raise ValueError(\n                f\"color_name must contain a name from {TAGGER_COLOR_PALETTE.keys()} \"\n                f\"not {color_name}\"\n            )\n    elif isinstance(color_name, list):\n        for color in color_name:\n            if color not in TAGGER_COLOR_PALETTE:\n                raise ValueError(\n                    f\"color_name must contain a name from {TAGGER_COLOR_PALETTE.keys()}\"\n                    f\" not {color}\"\n                )\n            if len(color_name) != len(tags):\n                raise ValueError(\n                    f\"color_name must be the same length as tags. \"\n                    f\"len(color_name) = {len(color_name)}, len(tags) = {len(tags)}\"\n                )\n\n    tags_html = _get_html(content, tags, color_name)\n\n    st.write(tags_html, unsafe_allow_html=True)\n</code></pre>"},{"location":"extras/toggle_switch/","title":"\ud83d\udd1b Toggle Switch","text":"<p>Submitted by Carlos D. Serrano</p>"},{"location":"extras/toggle_switch/#summary","title":"Summary","text":"<p>On/Off Toggle Switch with color customizations</p>"},{"location":"extras/toggle_switch/#docstring","title":"Docstring","text":""},{"location":"extras/vertical_slider/","title":"\ud83c\udf9a Vertical Slider","text":"<p>Submitted by Carlos D. Serrano</p>"},{"location":"extras/vertical_slider/#summary","title":"Summary","text":"<p>Continuous Vertical Slider with color customizations</p>"},{"location":"extras/vertical_slider/#docstring","title":"Docstring","text":""},{"location":"extras/word_importances/","title":"\u2757 Word Importances","text":"<p>Submitted by Arnaud Miribel</p>"},{"location":"extras/word_importances/#summary","title":"Summary","text":"<p>Highlight words based on their importances. Inspired from captum library.</p>"},{"location":"extras/word_importances/#docstring","title":"Docstring","text":""},{"location":"extras/word_importances/#src.streamlit_extras.word_importances.format_word_importances","title":"<code>format_word_importances(words, importances)</code>","text":"<p>Adds a background color to each word based on its importance (float from -1 to 1)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; format_word_importances(words=[\"Hello\", \"world\"], importances=[0.1, 0.2])\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>words</code> <code>list</code> <p>List of words</p> required <code>importances</code> <code>list</code> <p>List of importances (scores from -1 to 1)</p> required <p>Returns:</p> Name Type Description <code>html</code> <code>str</code> <p>HTML string with formatted word</p> Source code in <code>src/streamlit_extras/word_importances/__init__.py</code> <pre><code>@extra\ndef format_word_importances(words: List[str], importances: List[float]) -&gt; str:\n\"\"\"Adds a background color to each word based on its importance (float from -1 to 1)\n\n    Examples:\n        &gt;&gt;&gt; format_word_importances(words=[\"Hello\", \"world\"], importances=[0.1, 0.2])\n\n    Args:\n        words (list): List of words\n        importances (list): List of importances (scores from -1 to 1)\n\n    Returns:\n        html: HTML string with formatted word\n\n\n    \"\"\"\n    if importances is None or len(importances) == 0:\n        return \"&lt;td&gt;&lt;/td&gt;\"\n    assert len(words) == len(importances), \"Words and importances but be of same length\"\n\n    tags = [\"&lt;td&gt;\"]\n    for word, importance in zip(words, importances[: len(words)]):\n        color = _get_color(importance)\n        unwrapped_tag = (\n            '&lt;mark style=\"background-color: {color}; opacity:1.0;             '\n            '        line-height:1.75\"&gt;&lt;font color=\"black\"&gt; {word}            '\n            \"        &lt;/font&gt;&lt;/mark&gt;\".format(color=color, word=word)\n        )\n        tags.append(unwrapped_tag)\n    tags.append(\"&lt;/td&gt;\")\n    html = \"\".join(tags)\n\n    return html\n</code></pre>"}]}